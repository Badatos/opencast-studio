{"version":3,"sources":["util.js","settings.js","opencast.js","style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","index.js"],"names":["isDisplayCaptureSupported","navigator","mediaDevices","test","platform","userAgent","isUserCaptureSupported","isRecordingSupported","MediaRecorder","onSafari","dimensionsOf","stream","getVideoTracks","getSettings","width","height","recordingFileName","mime","flavor","nowAsString","lowerMime","toLowerCase","startsWith","mimeToExt","pad2","n","now","Date","getFullYear","getMonth","getDate","getHours","getMinutes","userHasWebcam","a","enumerateDevices","devices","some","d","kind","decodeHexString","hex","length","SyntaxError","digitToNum","digit","charCodeAt","RangeError","bytes","Uint8Array","i","substring","TextDecoder","decode","SettingsManager","values","contextSettings","urlSettings","onChange","this","userSettings","newSettings","merge","window","localStorage","setItem","JSON","stringify","settings","all","defaultSettings","path","obj","fixedSettings","segments","split","segment","isConfigurable","opencast","loginProvided","allowParse","source","validate","schema","_type","validateValue","validateObj","value","expectedType","actualType","Array","isArray","out","s","console","warn","parseBoolean","Number","parseInteger","parsed","parse","parseArray","expectedElementType","_elements","elem","validateResult","_validate","Object","keys","key","newPath","SCHEMA","self","stored","getItem","rawUserSettings","loadContextSettings","rawContextSettings","urlParams","URLSearchParams","location","search","rawUrlSettings","get","encoded","decoded","e","slice","forEach","upload","acl","fetchAcl","basepath","endsWith","settingsPath","process","REACT_APP_SETTINGS_PATH","base","url","origin","fetch","response","status","debug","ok","error","statusText","headers","json","uploadSettings","text","serverUrl","loginName","loginPassword","positiveInteger","name","URL","protocol","seriesId","workflowId","v","recording","videoBitrate","mimes","maxFps","maxHeight","b","deepmerge","arrayMerge","array","destinationArray","sourceArray","options","Context","React","createContext","useSettings","useContext","Provider","settingsManager","children","useState","updateSettings","useEffect","STATE_UNCONFIGURED","STATE_CONNECTED","STATE_LOGGED_IN","STATE_NETWORK_ERROR","STATE_RESPONSE_NOT_OK","STATE_INVALID_RESPONSE","STATE_INCORRECT_LOGIN","Opencast","updateGlobalOc","newInstance","equal","catchRequestError","updateUser","getInfoMe","newUser","user","username","jsonRequest","request","RequestError","password","btoa","unescape","encodeURIComponent","credentials","redirect","type","recordings","title","creator","refreshConnection","isReadyToUpload","then","mediaPackage","dcc","dcCatalog","body","FormData","append","method","template","DEFAULT_ACL_TEMPLATE","constructAcl","aclBody","Blob","deviceType","media","mimeType","trackFlavor","downloadName","ingestBody","hostname","Error","ltiCourseId","roles","find","r","replace","undefined","roleOAuthUser","defaultReadRoles","userRole","defaultWriteRoles","push","view","userName","escapeString","map","Mustache","render","msg","fn","useOpencast","initial","updateDummy","updateOpencast","old","XMLSerializer","serializeToString","Text","seriesLine","toISOString","GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","baseButton","fontSize","mr","bg","borderColor","borderWidth","borderStyle","cursor","opacity","breakpoints","space","fonts","monospace","fontSizes","fontWeights","bold","lineHeights","heights","headerHeight","colors","background","primary","secondary","muted","highlight","gray","videoOverlay","buttons","darken","danger","border","theme","cards","boxShadow","maxWidth","position","styles","root","h1","mt","mb","h2","h3","h4","h5","h6","p","pre","overflowX","code","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","input","borderRadius","px","py","outline","transition","select","container","mx","resources","en","translation","de","el","es","fa","fr","nl","tr","i18n","use","initReactI18next","LanguageDetector","init","fallbackLng","keySeparator","interpolation","escapeValue","detection","order","Boolean","match","Sentry","dsn","initialize","Promise","mod","default","oc","ReactDOM","document","getElementById","App","StrictMode","message","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4adac220.chunk.js","sourcesContent":["// Checks if we app is running on a mobile device.\n//\n// This check could be more exhaustive, but this includes all browser we\n// officially support.\nexport const onMobileDevice = () =>\n  /Android|iPhone|iPad|iPod/i.test(navigator.platform) ||\n  /Android/i.test(navigator.userAgent);\n\n// Checks if the client supports capturing the device's display (or individual\n// windows).\n//\n// Detecting whether display capture is supported is hard. There is currently\n// no proper solution. See these two links for more information:\n// - https://stackoverflow.com/q/58842831/2408867\n// - https://github.com/w3c/mediacapture-screen-share/issues/127\n//\n// To work around this problem, we simply check if the browser runs on a\n// mobile device. Currently, no mobile device/browser supports display\n// capture. However, this will probably change in the future, so we have to\n// revisit this issue again. This is tracked in this issue:\n// https://github.com/elan-ev/opencast-studio/issues/204\nexport const isDisplayCaptureSupported = () =>\n  \"mediaDevices\" in navigator &&\n  \"getDisplayMedia\" in navigator.mediaDevices &&\n  !onMobileDevice();\n\n// Checks if the client supports capturing \"user devices\" (usually webcams or\n// phone cameras).\nexport const isUserCaptureSupported = () =>\n  'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices;\n\n// Checks if the browsers supports the `MediaRecorder` API required to actually\n// record the media streams.\nexport const isRecordingSupported = () => typeof MediaRecorder !== 'undefined';\n\n// Checks if this runs in Safari. Check from https://stackoverflow.com/a/23522755/\nexport const onSafari = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n// Returns the dimensions as [w, h] array or `null` if there is no video track.\nexport const dimensionsOf = stream => {\n  const { width, height } = stream?.getVideoTracks()?.[0]?.getSettings() ?? {};\n  return [width, height];\n};\n\n// Converts the MIME type into a file extension.\nexport const mimeToExt = mime => {\n  if (mime) {\n    const lowerMime = mime.toLowerCase();\n    if (lowerMime.startsWith(\"video/webm\")) {\n      return \"webm\";\n    }\n    if (lowerMime.startsWith(\"video/mp4\")) {\n      return \"mp4\";\n    }\n    if (lowerMime.startsWith(\"video/x-matroska\")) {\n      return \"mkv\";\n    }\n    if (lowerMime.startsWith(\"video/avi\")) {\n      return \"avi\";\n    }\n    if (lowerMime.startsWith(\"video/quicktime\")) {\n      return \"mov\";\n    }\n  }\n\n  // If we know nothing, our best guess is webm; except for Safari which does\n  // not understand webm: there it's mp4.\n  return onSafari() ? \"mp4\" : \"webm\";\n}\n\n// Returns a suitable filename for a recording with the MIME type `mime` and the\n// given `flavor`. The latter should be either `presenter` or `presentation`.\n// `mime` can be null or a string and is converted to a file extension on a best\n// effort basis.\nexport const recordingFileName = (mime, flavor) => {\n  return `oc-studio-${nowAsString()}-${flavor}.${mimeToExt(mime)}`;\n};\n\nconst nowAsString = () => {\n  const pad2 = n => n >= 10 ? '' + n : '0' + n;\n\n  const now = new Date();\n  return ''\n    + now.getFullYear() + '-'\n    + pad2(now.getMonth() + 1) + '-'\n    + pad2(now.getDate()) + '_'\n    + pad2(now.getHours()) + '-'\n    + pad2(now.getMinutes());\n};\n\nexport const userHasWebcam = async () => {\n  const devices = await navigator.mediaDevices.enumerateDevices()\n  return devices.some(d => d.kind === 'videoinput');\n}\n\n// Decodes the given hex string into a new string. If the given string contains\n// characters that are not hexadecimal digits or if the string's length is odd,\n// this function will throw an exception.\nexport const decodeHexString = hex => {\n  if (hex.length % 2 !== 0) {\n    throw new SyntaxError('hex string does not have an even length');\n  }\n\n  const digitToNum = digit => {\n    if (digit >= '0' && digit <= '9') {\n      return digit.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if (digit >= 'a' && digit <= 'f') {\n      return digit.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    } else if (digit >= 'A' && digit <= 'F') {\n      return digit.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      throw new RangeError(`invalid hex digit '${digit}'`);\n    }\n  };\n\n  let bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = 16 * digitToNum(hex.substring(i, i + 1))\n      + digitToNum(hex.substring(i + 1, i + 2));\n  }\n\n  return new TextDecoder().decode(bytes);\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport deepmerge from 'deepmerge';\nimport { decodeHexString } from './util';\n\n\nconst LOCAL_STORAGE_KEY = 'ocStudioSettings';\nconst CONTEXT_SETTINGS_FILE = 'settings.json';\n\n// Responsible for obtaining settings from different places (context settings,\n// local storage, query parameter) and merging them appropriately.\nexport class SettingsManager {\n  // The settings set by the server. These cannot be edited by the user. If the\n  // server did not specify any settings, this is `{}`.\n  contextSettings = {};\n\n  // These settings are given in the query part of the URL (e.g.\n  // `?opencast.loginName=peter`). If there are no settings in the URL, this\n  // is `{}`.\n  urlSettings = {};\n\n  // The settings set by the user and stored in local storage. This is `{}` if\n  // there were no settings in local storage.\n  #userSettings = {};\n\n  // This function is called whenever the user saved their settings. The new\n  // settings object is passed as parameter.\n  onChange = null;\n\n  // This constructor is mainly used for tests. Use `init()` to get an instance\n  // for the real application.\n  constructor(values) {\n    if (values) {\n      if (values.contextSettings) {\n        this.contextSettings = values.contextSettings;\n      }\n      if (values.urlSettings) {\n        this.urlSettings = values.urlSettings;\n      }\n      if (values.userSettings) {\n        this.#userSettings = values.userSettings;\n      }\n    }\n  }\n\n  // Creates a new `Settings` instance by loading user settings from local\n  // storage and attempting to load context settings from `/settings.json`.\n  static async init() {\n    let self = new SettingsManager();\n\n    // Load the user settings from local storage\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored !== null) {\n      let rawUserSettings;\n      try {\n        rawUserSettings = JSON.parse(stored);\n      } catch {\n        console.warn(\"Could not parse settings stored in local storage. Ignoring.\");\n      }\n      self.#userSettings = self.validate(\n        rawUserSettings,\n        false,\n        'from local storage user settings',\n      );\n    }\n\n    const rawContextSettings = await SettingsManager.loadContextSettings() || {};;\n    self.contextSettings = self.validate(rawContextSettings, false, 'specified in \\'settings.json\\'');\n\n    // Get settings from URL query.\n    const urlParams = new URLSearchParams(window.location.search);\n\n    let rawUrlSettings = {};\n    if (urlParams.get('config')) {\n      // In this case, the GET parameter `config` is specified. We now expect a\n      // hex encoded stringified JSON object describing the configuration. This\n      // is possible in cases where special characters in GET parameters might\n      // get modified somehow (e.g. by an LMS). A config=hexstring only uses\n      // the most basic characters, so it should always work.\n\n      const encoded = urlParams.get('config');\n      try {\n        const decoded = decodeHexString(encoded);\n        rawUrlSettings = JSON.parse(decoded);\n      } catch (e) {\n        console.warn(\n          `Could not decode and parse hex-encoded JSON string given to GET parameter `\n          + `'config'. Ignoring. Error:`,\n          e,\n        );\n      }\n\n      for (const key of urlParams.keys()) {\n        if (key !== 'config') {\n          console.warn(\n            `URL GET parameter '${key}' is ignored as 'config' is specified. Either specify `\n            + ` all configuration via the 'config' GET parameter hex string or via direct GET `\n            + `parameters. Mixing is not allowed.`\n          );\n        }\n      }\n    } else {\n      // Interpret each get parameter as single configuration value.\n      for (let [key, value] of urlParams) {\n        // Create empty objects for full path (if the key contains '.') and set\n        // the value at the end.\n        let obj = rawUrlSettings;\n        const segments = key.split('.');\n        segments.slice(0, -1).forEach((segment) => {\n          if (!(segment in obj)) {\n            obj[segment] = {};\n          }\n          obj = obj[segment];\n        });\n        obj[segments[segments.length - 1]] = value;\n      }\n    }\n\n    self.urlSettings = self.validate(rawUrlSettings, true, 'given as URL GET parameter');\n\n    // We have to do some special treatment of the `upload.acl` property. Users\n    // cannot set this setting, so we only have to check urlSettings and\n    // contextSettings.\n    if (typeof self.urlSettings.upload?.acl !== 'undefined') {\n      await SettingsManager.fetchAcl(self.urlSettings.upload);\n    } else if (typeof self.contextSettings.upload?.acl !== 'undefined') {\n      await SettingsManager.fetchAcl(self.contextSettings.upload);\n    }\n\n    return self;\n  }\n\n  // Attempts to loads `settings.json`. If it fails for some reason, returns\n  // `null` and prints an appropriate message on console.\n  static async loadContextSettings() {\n    // Try to retrieve the context settings.\n    let basepath = process.env.PUBLIC_URL || '/';\n    if (!basepath.endsWith('/')) {\n      basepath += '/';\n    }\n\n    // Construct path to settings JSON file. If the `REACT_APP_SETTINGS_PATH` is\n    // given and starts with '/', it is interpreted as absolute path from the\n    // server root.\n    const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n    const base = settingsPath.startsWith('/') ? '' : basepath;\n    const url = `${window.location.origin}${base}${settingsPath}`;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (e) {\n      console.warn('Could not access `settings.json` due to network error!', e || \"\");\n      return null;\n    }\n\n    if (response.status === 404) {\n      // If `settings.json` was not found, we silently ignore the error. We\n      // expecet many installation to now provide this file.\n      console.debug(\"`settings.json` returned 404: ignoring\");\n      return null;\n    } else if (!response.ok) {\n      console.error(\n        `Fetching 'settings.json' failed: ${response.status} ${response.statusText}`\n      );\n      return null;\n    }\n\n    if (!response.headers.get('Content-Type').startsWith('application/json')) {\n      console.warn(\n        \"'settings.json' request does not have 'Content-Type: application/json' -> ignoring...\"\n      );\n      return null;\n    }\n\n    try {\n      return await response.json();\n    } catch(e) {\n      console.error(\"Could not parse 'settings.json': \", e);\n      throw new SyntaxError(`Could not parse 'settings.json': ${e}`);\n    }\n  }\n\n  static async fetchAcl(uploadSettings) {\n    if (uploadSettings.acl === 'false') {\n      uploadSettings.acl = false;\n      return;\n    } else if (typeof uploadSettings.acl === 'string') {\n      // Try to retrieve the context settings.\n      let basepath = process.env.PUBLIC_URL || '/';\n      if (!basepath.endsWith('/')) {\n        basepath += '/';\n      }\n\n      // Construct path to settings XML file. If the `uploadSettings.acl`\n      // starts with '/', it is interpreted as absolute path from the server\n      // root.\n      const base = uploadSettings.acl.startsWith('/') ? '' : basepath;\n      const url = `${window.location.origin}${base}${uploadSettings.acl}`;\n\n      // Try to download ACL template file\n      let response;\n      try {\n        response = await fetch(url);\n      } catch (e) {\n        console.error(\n          `Could not access ACL template '${url}' due to network error! Using default ACLs.`,\n          e || \"\",\n        );\n        uploadSettings.acl = true;\n        return;\n      }\n\n      // Check for 404 error\n      if (response.status === 404) {\n        console.error(`ACL template '${url}' returned 404! Using default ACLs`);\n        uploadSettings.acl = true;\n        return;\n      } else if (!response.ok) {\n        console.error(\n          `Fetching ACL template '${url}' failed: ${response.status} ${response.statusText}`\n        );\n        uploadSettings.acl = true;\n        return;\n      }\n\n      if (!response.headers.get('Content-Type').startsWith('application/xml')) {\n        console.warn(\n          `ACL template request '${url}' does not have 'Content-Type: application/xml'. `\n          + `Using default ACLs.`\n        );\n        uploadSettings.acl = true;\n        return null;\n      }\n\n      // Finally, set the setting to the template string.\n      uploadSettings.acl = await response.text();\n    } else {\n      uploadSettings.acl = true;\n      console.warn(\n        `'upload.acl' has invalid value (has to be 'false' or a path to an XML `\n        + `template file. Using default ACLs.`\n      );\n      return;\n    }\n  }\n\n  // Stores the given `newSettings` as user settings. The given object might be\n  // partial, i.e. only the new values can be specified. Values in `newSettings`\n  // override values in the old user settings.\n  saveSettings(newSettings) {\n    this.#userSettings = merge(this.#userSettings, newSettings);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.#userSettings));\n    if (this.onChange) {\n      this.onChange(this.settings());\n    }\n  }\n\n  // The merged settings that the whole application should use.\n  settings() {\n    return merge.all([this.#userSettings, this.contextSettings, this.urlSettings]);\n  }\n\n  // The values for the settings forms. These are simply the user settings with\n  // missing settings filled by `defaultSettings`.\n  formValues() {\n    return merge(defaultSettings, this.#userSettings);\n  }\n\n  fixedSettings() {\n    return merge(this.contextSettings, this.urlSettings);\n  }\n\n  // Returns whether a specific setting is configurable by the user. It is not\n  // if the setting is fixed by the context setting or an URL setting. The path\n  // is given as string. Example: `manager.isConfigurable('opencast.loginName')`\n  isConfigurable(path) {\n    let obj = this.fixedSettings();\n    const segments = path.split('.');\n    for (const segment of segments) {\n      if (!(segment in obj)) {\n        return true;\n      }\n      obj = obj[segment];\n    }\n\n    return false;\n  }\n\n  isUsernameConfigurable() {\n    return this.isConfigurable('opencast.loginName')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n  isPasswordConfigurable() {\n    return this.isConfigurable('opencast.loginPassword')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n\n  // Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n  // is true, string values are attempted to parse into the expected type.\n  // `source` is just a string for error messages specifying where `obj` comes\n  // from.\n  validate(obj, allowParse, source) {\n    const parseBoolean = (s, path) => {\n      switch (s) {\n        case 'true':\n          return true;\n\n        case 'false':\n          return false;\n\n        default:\n          console.warn(\n            `Settings value '${path}' (${source}) can't be parsed as 'boolean' `\n            + ` (value: '${s}'). Ignoring.`\n          );\n          return null;\n      }\n    };\n\n    const parseInteger = (s, path) => {\n      if (/^[-+]?(\\d+)$/.test(s)) {\n        return Number(s);\n      } else {\n        console.warn(\n          `Settings value '${path}' (${source}) can't be parsed as integer `\n          + `(value: '${s}'). Ignoring.`\n        );\n        return null;\n      }\n    };\n\n    const parseArray = (s, path) => {\n      try {\n        const parsed = JSON.parse(s);\n        if (!Array.isArray(parsed)) {\n          console.warn(\n            `Settings value '${path}' (${source}) is not an 'array' (value: '${s}'). Ignoring.`\n          );\n          return null;\n        }\n\n        return parsed;\n      } catch {\n        console.warn(\n          `Settings value '${path}' (${source}) can't be parsed as its `\n          + `expected type 'array' (value: '${s}'). Ignoring.`\n        );\n        return null;\n      }\n    };\n\n    // Validates `obj` with `schema`. `path` is the current path used for error\n    // messages.\n    const validate = (schema, obj, path) => {\n      if (typeof schema === 'string' || typeof schema._type === 'string') {\n        return validateValue(schema, obj, path);\n      } else {\n        return validateObj(schema, obj, path);\n      }\n    };\n\n    // Validate a settings value. `schema` should either be a string specifying\n    // the expected type or an object with these fields:\n    //\n    // - `_type`: a string specifying the expected type\n    // - `_validate` (optional): a function returning either `true` (validation\n    //   successful) or a string (validation error).\n    // - `_elements`: Only if `_type` is 'array'! Specifies type and validation\n    //   function for array elements. Object with fields `_type` and optionally\n    //   `_validate`.\n    const validateValue = (schema, value, path) => {\n      // Check the type of this value.\n      const expectedType = typeof schema === 'string' ? schema : schema._type;\n      const actualType = Array.isArray(value) ? 'array' : typeof value;\n\n      let out = null;\n      if (expectedType === 'any' || actualType === expectedType) {\n        out = value;\n      } else {\n        if (actualType === 'string' && allowParse) {\n          switch (expectedType) {\n            case 'boolean': out = parseBoolean(value, path); break;\n            case 'int': out = parseInteger(value, path); break;\n            case 'array': out = parseArray(value, path); break;\n            default:\n              console.warn(`internal bug: unknown type ${expectedType}. Ignoring ${path}.`);\n          }\n        } else {\n          console.warn(\n            `Settings value '${path}' (${source}) should be of type '${expectedType}', but is `\n            + `'${actualType}' (${value}). Ignoring.`\n          );\n        }\n      }\n\n      // Check type of array elements and validate those.\n      if (Array.isArray(out) && typeof schema === 'object' && '_elements' in schema) {\n        const expectedElementType = typeof schema._elements === 'string'\n          ? schema._elements\n          : schema._elements._type;\n\n        for (const elem of out) {\n          if (typeof elem !== expectedElementType) {\n            console.warn(\n              `Some elements of array value '${path}' (${source}) are not of type `\n              + `'${expectedElementType}'. Ignoring complete array.`\n            );\n            return null;\n          }\n\n          if (typeof schema._elements === 'object' && '_validate' in schema._elements) {\n            const validateResult = schema._elements._validate(elem);\n            if (validateResult !== true) {\n              console.warn(\n                `Validation of one element in array setting value '${path}' (${source}) `\n                + `failed: ${validateResult}. Ignoring complete array.`\n              );\n              return null;\n            }\n          }\n        }\n      }\n\n      // Run validation function if the type was correct and a validation is\n      // specified.\n      if (out !== null && typeof schema === 'object' && '_validate' in schema) {\n        const validateResult = schema._validate(out);\n        if (validateResult !== true) {\n          console.warn(\n            `Validation of setting value '${path}' (${source}) failed: ${validateResult}. `\n            + `Ignoring.`\n          );\n          return null;\n        }\n      }\n\n      return out;\n    };\n\n    // Validate a settings object/namespace. `schema` and `obj` need to be\n    // objects.\n    const validateObj = (schema, obj, path) => {\n      // We iterate through all keys of the given settings object, checking if\n      // each key is valid and recursively validating the value of that key.\n      let out = {};\n      for (const key of Object.keys(obj)) {\n        const newPath = path ? `${path}.${key}` : key;\n        if (key in schema) {\n          const value = validate(schema[key], obj[key], newPath);\n\n          // If `null` is returned, the validation failed and we ignore this\n          // value.\n          if (value !== null) {\n            out[key] = value;\n          }\n        } else {\n          console.warn(\n            `'${newPath}' (${source}) is not a valid settings key. Ignoring.`\n          );\n        }\n      }\n\n      return out;\n    };\n\n    return validate(SCHEMA, obj, \"\");\n  }\n}\n\n\nexport const validateServerUrl = value => {\n  if (value === '/' || value === '') {\n    return true;\n  }\n\n  try {\n    const url = new URL(value);\n    return (url.protocol === 'https:' || url.protocol === 'http:')\n      || 'the URL does not start with \"http:\" or \"https:\"';\n  } catch (e) {\n    return 'not a valid URL';\n  }\n};\n\n\nconst defaultSettings = {\n  opencast: {\n    serverUrl: 'https://develop.opencast.org/',\n    loginName: 'admin',\n    loginPassword: 'opencast',\n  }\n};\n\nconst positiveInteger = name => ({\n  _type: 'int',\n  _validate: i => i > 0 || `'${name}' has to be positive`,\n});\n\n// Defines all potential settings and their types\nconst SCHEMA = {\n  opencast: {\n    serverUrl: {\n      _type: 'string',\n      _validate: validateServerUrl,\n    },\n    loginName: 'string',\n    loginPassword: 'string',\n    loginProvided: 'boolean',\n  },\n  upload: {\n    seriesId: 'string',\n    workflowId: 'string',\n    // This gets some special treatment in `fetchAcl`. After `fetchAcl` is\n    // done, this one of:\n    // - undefined: setting was not set.\n    // - `false`: do not send any ACLs when uploading\n    // - `true`: explictely send default ACLs when uploading (this is the default behavior)\n    // - ACL template string: already fetched ACL template string.\n    acl: {\n      _type: 'any',\n      _validate: v => (\n        v === false || typeof v === 'string' || `'upload.acl' needs to be 'false' or a string`\n      ),\n    },\n  },\n  recording: {\n    videoBitrate: positiveInteger('bitrate'),\n    mimes: {\n      _type: 'array',\n      _elements: {\n        _type: 'string',\n      }\n    },\n  },\n  'display': {\n    maxFps: positiveInteger('display.maxFps'),\n    maxHeight: positiveInteger('display.maxHeight'),\n  },\n  'camera': {\n    maxFps: positiveInteger('camera.maxFps'),\n    maxHeight: positiveInteger('camera.maxHeight'),\n  },\n};\n\n\n// Custumize array merge behavior\nlet merge = (a, b) => {\n  return deepmerge(a, b, { arrayMerge });\n};\nmerge.all = array => deepmerge.all(array, { arrayMerge })\nconst arrayMerge = (destinationArray, sourceArray, options) => sourceArray;\n\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useSettings = () => React.useContext(Context);\n\nexport const Provider = ({ settingsManager, children }) => {\n  const [settings, updateSettings] = useState(settingsManager.settings());\n  settingsManager.onChange = newSettings => updateSettings(newSettings);\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current settings: \", settings);\n  });\n\n  return (\n    <Context.Provider value={settings}>\n      {children}\n    </Context.Provider>\n  );\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport equal from 'fast-deep-equal';\nimport Mustache from 'mustache';\n\nimport { recordingFileName } from './util.js';\n\n\n// The server URL was not specified.\nexport const STATE_UNCONFIGURED = 'unconfigured';\n\n// The OC server is reachable but a login was not attempted and the current user\n// is anonymous.\nexport const STATE_CONNECTED = 'connected';\n\n// The OC server is reachable and the user is authenticated.\nexport const STATE_LOGGED_IN = 'logged_in';\n\n// Some network error occured when accessing the server.\nexport const STATE_NETWORK_ERROR = 'network_error';\n\n// When accessing the OC API, the request returned as non-2xx code unexpectedly.\n// This likely indicates that the server is not actually a valid OC server.\nexport const STATE_RESPONSE_NOT_OK = 'response_not_ok';\n\n// The API requested returned invalid JSON or unexpected data.\nexport const STATE_INVALID_RESPONSE = 'invalid_response';\n\n// The server is reachable and a login was provided, but the login did not\n// succeed.\nexport const STATE_INCORRECT_LOGIN = 'incorrect_login';\n\n\nexport class Opencast {\n  #state = STATE_UNCONFIGURED;\n  #serverUrl = null;\n\n  // This can one of either:\n  // - `null`: no login is provided and login data is not specified\n  // - `true`: a login is already automatically provided from the OC context\n  // - `{ username, password }`: username and password are given\n  #login = null;\n\n  // The response of `info/me.json` or `null` if requesting that API did not\n  // succeed.\n  #currentUser = null;\n\n  updateGlobalOc = null;\n\n\n  // Creates a new instance. Static method instead of constructor because it\n  // needs to be async.\n  static async init(settings) {\n    let self = new Opencast();\n\n    if (!settings?.serverUrl) {\n      self.#state = STATE_UNCONFIGURED;\n      self.#serverUrl = null;\n      self.#login = null;\n\n      return self;\n    }\n\n    self.#serverUrl = settings.serverUrl.endsWith('/')\n      ? settings.serverUrl.slice(0, -1)\n      : settings.serverUrl;\n\n    if (settings.loginProvided === true) {\n      // Here we can assume Studio is running within an Opencast instance and\n      // the route to Studio is protected via login. This means that login\n      // cookies are already present and we don't need to worry about that.\n      self.#login = true;\n    } else if (settings.loginName && settings.loginPassword) {\n      // Studio is not running in OC context, but username and password are\n      // provided.\n      self.#login = {\n        username: settings.loginName,\n        password: settings.loginPassword,\n      };\n    } else {\n      // Login is not yet provided.\n      self.#login = null;\n    }\n\n    await catchRequestError(async () => await self.updateUser());\n\n    return self;\n  }\n\n  // Updates the global OC instance from `this` to `newInstance`, IF the new\n  // instance is different. This should only be called when the settings are\n  // saved.\n  setGlobalInstance(newInstance) {\n    if (!this.updateGlobalOc) {\n      console.error(\"bug: 'updateGlobalOc' not set\");\n    }\n\n    // We only update if the two instances are different (ignoring the\n    // `updateGlobalOc` key though).\n    newInstance.updateGlobalOc = this.updateGlobalOc;\n    const changed = this.#state !== newInstance.#state\n      || this.#serverUrl !== newInstance.#serverUrl\n      || !equal(this.#login, newInstance.#login)\n      || !equal(this.#currentUser, newInstance.#currentUser);\n\n    if (changed) {\n      this.updateGlobalOc(newInstance);\n    }\n  }\n\n  // Refreshes the connection by requesting `info/me` unless the state is\n  // 'unconfigured'.\n  //\n  // If the request errors or returns a different user, the globale Opencast\n  // instance is updated.\n  async refreshConnection() {\n    if (this.#state === STATE_UNCONFIGURED) {\n      return;\n    }\n\n    await catchRequestError(async () => {\n      // Request to `info/me`. If the user or the current state has changed\n      const changed = await this.updateUser();\n      if (changed) {\n        this.updateGlobalOc(this);\n      }\n    });\n  }\n\n  // Updates `#currentUser` by checking 'info/me.json'.\n  //\n  // The `#state` is also updated accordingly to `STATE_LOGGED_IN`,\n  // `STATE_INCORRECT_LOGIN` or `STATE_CONNECTED`. This method returns whether\n  // the state or user object has changed in any way.\n  async updateUser() {\n    const newUser = await this.getInfoMe();\n\n    if (!equal(newUser, this.#currentUser)) {\n      this.#currentUser = newUser;\n      if (newUser.user.username === 'anonymous') {\n        if (this.#login) {\n          this.#state = STATE_INCORRECT_LOGIN;\n        } else {\n          this.#state = STATE_CONNECTED;\n        }\n      } else {\n        this.#state = STATE_LOGGED_IN;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Returns the response from the `info/me.json` endpoint.\n  async getInfoMe() {\n    return await this.jsonRequest(\"info/me.json\");\n  }\n\n  // Sends a request to the Opencast API expecting a JSON response.\n  //\n  // On success, the parsed JSON is returned as object. If anything goes wrong,\n  // a `RequestError` is thrown and the corresponding `this.#state` is set.\n  async jsonRequest(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n    const response = await this.request(path, options);\n\n    try {\n      return await response.json();\n    } catch(e) {\n      this.#state = STATE_INVALID_RESPONSE;\n      throw new RequestError(`invalid response (invalid JSON) when accessing ${url}: `, e);\n    }\n  }\n\n  // Sends a request to the Opencast API, returning the response object.\n  //\n  // If anything goes wrong, a `RequestError` is thrown and the corresponding\n  // `this.#state` is set.\n  async request(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n\n    // Add HTTP Basic Auth headers if username and password are provided.\n    let headers = {};\n    if (this.#login?.username && this.#login?.password) {\n      const encoded = btoa(unescape(encodeURIComponent(\n        this.#login.username + ':' + this.#login.password\n      )));\n      headers = { 'Authorization': `Basic ${encoded}` };\n    }\n\n    let response;\n    try {\n      response = await fetch(url, {\n        ...options,\n        credentials: 'same-origin',\n        redirect: 'manual',\n        headers,\n      });\n    } catch (e) {\n      this.#state = STATE_NETWORK_ERROR;\n      throw new RequestError(`network error when accessing '${url}': `, e);\n    }\n\n    // Handle 401 Bad credentials for HTTP Basic Auth\n    if (response.status === 401) {\n      this.#state = STATE_INCORRECT_LOGIN;\n      throw new RequestError(\"incorrect login data (request returned 401)\");\n    }\n\n    if (!response.ok && response.type !== 'opaqueredirect') {\n      this.#state = STATE_RESPONSE_NOT_OK;\n      throw new RequestError(\n        `unexpected ${response.status} ${response.statusText} response when accessing ${url}`\n      );\n    }\n\n    return response;\n  }\n\n  // Uploads the given recordings with the given title and creator metadata. If\n  // the upload fails, `false` is returned and `getState` changes to an error\n  // state.\n  async upload({ recordings, title, creator, uploadSettings }) {\n    const workflowId = uploadSettings?.workflowId;\n    const seriesId = uploadSettings?.seriesId;\n\n    // Refresh connection and check if we are ready to upload.\n    await this.refreshConnection();\n    if (!this.isReadyToUpload()) {\n      return false;\n    }\n\n    // Actually upload\n    try {\n      // Create new media package\n      let mediaPackage = await this.request(\"ingest/createMediaPackage\")\n        .then(response => response.text());\n\n\n      // Add metadata to media package\n      const dcc = dcCatalog({ creator, title, seriesId });\n      const body = new FormData();\n      body.append('mediaPackage', mediaPackage);\n      body.append('dublinCore', dcc);\n      body.append('flavor', 'dublincore/episode');\n\n      mediaPackage = await this.request(\"ingest/addDCCatalog\", { method: 'post', body })\n        .then(response => response.text());\n\n\n      // Set ACL to allow the current user to read and write this recording.\n      if (uploadSettings?.acl !== false) {\n        const template = uploadSettings?.acl === true || (!uploadSettings?.acl)\n          ? DEFAULT_ACL_TEMPLATE\n          : uploadSettings?.acl;\n        const acl = this.constructAcl(template);\n\n        const aclBody = new FormData();\n        aclBody.append('flavor', 'security/xacml+episode');\n        aclBody.append('mediaPackage', mediaPackage);\n        aclBody.append('BODY', new Blob([acl]), 'acl.xml');\n\n        mediaPackage = await this.request(\"ingest/addAttachment\", { method: 'post', body: aclBody })\n          .then(response => response.text());\n      }\n\n      // Add all recordings\n      for (const { deviceType, media, mimeType } of recordings) {\n        let trackFlavor = 'presentation/source';\n        if (deviceType === 'desktop') {\n          trackFlavor = 'presentation/source';\n        } else if (deviceType === 'video') {\n          trackFlavor = 'presenter/source';\n        }\n\n        const flavor = deviceType === 'desktop' ? 'presentation' : 'presenter';\n        const downloadName = recordingFileName(mimeType, flavor);\n\n        const body = new FormData();\n        body.append('mediaPackage', mediaPackage);\n        body.append('flavor', trackFlavor);\n        body.append('tags', '');\n        body.append('BODY', media, downloadName);\n\n        mediaPackage = await this.request(\"ingest/addTrack\", { method: 'post', body })\n          .then(response => response.text());\n      }\n\n\n      // Finalize/ingest media package\n      const ingestBody = new FormData();\n      ingestBody.append('mediaPackage', mediaPackage);\n      if (workflowId) {\n        ingestBody.append('workflowDefinitionId', workflowId);\n      }\n      await this.request(\"ingest/ingest\", { method: 'post', body: ingestBody });\n\n      return true;\n    } catch(e) {\n      console.error(\"Error occured during upload: \", e);\n      return false;\n    }\n  }\n\n  // Returns the current state of the connection to the OC server.\n  getState() {\n    return this.#state;\n  }\n\n  // Returns whether or not a login is already provided (i.e. we don't need to\n  // login manually).\n  isLoginProvided() {\n    return this.#login === true;\n  }\n\n  // Returns whether or not the connection is ready to upload a video.\n  isReadyToUpload() {\n    return this.#state === STATE_LOGGED_IN;\n  }\n\n  // Returns the server URL in a form suitable to present to the user. Returns\n  // `null` if the server URL is not configured yet or if it is the same\n  // hostname as the one studio is running on.\n  prettyServerUrl() {\n    const url = this.#serverUrl;\n\n    return url && url.startsWith(\"https\")\n      ? new URL(url).hostname\n      : null;\n  }\n\n  // Constructs the ACL XML structure from the given template string.\n  constructAcl(template) {\n    if (!this.#currentUser) {\n      throw new Error(`'currentUser' is '${this.#currentUser}' in 'constructAcl'`);\n    }\n\n    // Prepare template \"view\": the values that can be used within the template.\n    let ltiCourseId = this.#currentUser.roles\n      .find(r => r.endsWith('_Learner') || r.endsWith('_Instructor'))\n      ?.replace('_Learner', '')\n      .replace('_Instructor', '');\n    if (ltiCourseId === 'LTI') {\n      ltiCourseId = undefined;\n    }\n\n    const roleOAuthUser = this.#currentUser.roles.find(r => r === 'ROLE_OAUTH_USER');\n\n    let defaultReadRoles = [this.#currentUser.userRole];\n    let defaultWriteRoles = [this.#currentUser.userRole];\n    if (ltiCourseId) {\n      defaultReadRoles.push(`${ltiCourseId}_Learner`, `${ltiCourseId}_Instructor`);\n      defaultWriteRoles.push(`${ltiCourseId}_Instructor`);\n    }\n\n    const view = {\n      userName: escapeString(this.#currentUser.user.username),\n      userRole: escapeString(this.#currentUser.userRole),\n      roleOAuthUser: escapeString(roleOAuthUser),\n      ltiCourseId: escapeString(ltiCourseId),\n      defaultReadRoles: defaultReadRoles.map(r => escapeString(r)),\n      defaultWriteRoles: defaultWriteRoles.map(r => escapeString(r)),\n    };\n    return Mustache.render(template, view);\n  }\n}\n\n\n// Internal error type, simply containing a string.\nfunction RequestError(msg) {\n  this.msg = msg;\n}\n\nconst catchRequestError = async (fn) => {\n  try {\n    return await fn();\n  } catch (e) {\n    if (e instanceof RequestError) {\n      console.error(e.msg);\n    } else {\n      throw e;\n    }\n    return null;\n  }\n};\n\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useOpencast = () => React.useContext(Context);\n\nexport const Provider = ({ initial, children }) => {\n  const [, updateDummy] = useState(0);\n  const [opencast, updateOpencast] = useState(initial);\n  opencast.updateGlobalOc = (newInstance) => {\n    updateOpencast(newInstance);\n\n    // If the object reference didn't change, we use this dummy state to force a\n    // rerender.\n    if (opencast === newInstance) {\n      updateDummy(old => old + 1);\n    }\n  };\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current Opencast connection: \", opencast);\n  });\n\n  return (\n    <Context.Provider value={opencast}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nconst escapeString = s => {\n  return new XMLSerializer().serializeToString(new Text(s));\n}\n\nconst dcCatalog = ({ creator, title, seriesId }) => {\n  const seriesLine = seriesId\n    ? `<dcterms:isPartOf>${escapeString(seriesId)}</dcterms:isPartOf>`\n    : '';\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <dublincore xmlns=\"http://www.opencastproject.org/xsd/1.0/dublincore/\"\n                xmlns:dcterms=\"http://purl.org/dc/terms/\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <dcterms:created xsi:type=\"dcterms:W3CDTF\">\n          ${escapeString(new Date(Date.now()).toISOString())}\n        </dcterms:created>\n        <dcterms:creator>${escapeString(creator)}</dcterms:creator>\n        <dcterms:extent xsi:type=\"dcterms:ISO8601\">PT5.568S</dcterms:extent>\n        <dcterms:title>${escapeString(title)}</dcterms:title>\n        <dcterms:spatial>Opencast Studio</dcterms:spatial>\n        ${seriesLine}\n    </dublincore>`;\n}\n\nconst DEFAULT_ACL_TEMPLATE = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Policy PolicyId=\"mediapackage-1\"\n  RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:permit-overrides\"\n  Version=\"2.0\"\n  xmlns=\"urn:oasis:names:tc:xacml:2.0:policy:schema:os\">\n  <Rule RuleId=\"user_read_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">read</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n  <Rule RuleId=\"user_write_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">write</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n</Policy>\n`;\n","import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n    box-sizing: border-box;\n}\n\nhtml, body, button, input {\n    font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n    overflow-x: hidden;\n}\n\nlabel, button:not(:disabled) {\n    cursor: pointer;\n}\n\nbutton {\n    outline: none;\n}\n\n#root {\n  height: 100%;\n}\n\n@keyframes pulse {\n  from { opacity: 0.85 }\n  50% { opacity: 0.6 }\n  to { opacity: 0.85 }\n}\n`;\n\nexport default GlobalStyle;\n","import { darken } from '@theme-ui/color';\n\nconst heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst baseButton = {\n  fontSize: 2,\n  '& svg': {\n    mr: 2\n  },\n  '&:disabled': {\n    bg: 'background',\n    borderColor: 'gray.2',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    color: 'text',\n    cursor: 'not-allowed',\n    opacity: 0.5\n  }\n};\n\nconst base = {\n  breakpoints: ['576px', '768px', '992px', '1200px'],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 300,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  heights: {\n    headerHeight: '3em'\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#888888',\n    highlight: '#3498db',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd', '#f5f5f5'],\n    videoOverlay: 'rgba(255, 255, 255, 0.2)'\n  },\n  text: {\n    text: {\n      fontWeight: 'body',\n      fontSize: '18px',\n    },\n    heading: {\n      fontWeight: 'heading',\n      fontSize: '18px',\n    },\n  },\n  buttons: {\n    primary: {\n      ...baseButton,\n      bg: 'primary',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('primary', 0.03)\n      },\n      '&:disabled': {\n        bg: 'gray.1'\n      },\n    },\n    danger: {\n      ...baseButton,\n      bg: 'error',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('error', 0.03)\n      }\n    },\n    text: {\n      ...baseButton,\n      bg: 'background',\n      color: 'text',\n      border: theme => `1px solid ${theme.colors.gray[1]}`,\n      '&:not(:disabled):hover': {\n        bg: 'gray.3'\n      }\n    }\n  },\n  cards: {\n    primary: {\n      bg: 'background',\n      boxShadow: '0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02)',\n      color: 'text',\n      maxWidth: '100%',\n      position: 'relative'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      mt: 0,\n      mb: 3,\n      fontSize: 5,\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      fontSize: '14pt',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    },\n    select: {\n      height: '2rem',\n      fontSize: '14pt',\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      }\n    }\n  },\n  container: {\n    mx: 'auto',\n    p: 3,\n    maxWidth: ['none', 'none', 960, 1152, 1344]\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\nimport deTranslations from './locales/de.json';\nimport elTranslations from './locales/el.json';\nimport esTranslations from './locales/es.json';\nimport faTranslations from './locales/fa.json';\nimport frTranslations from './locales/fr.json';\nimport nlTranslations from './locales/nl.json';\nimport trTranslations from './locales/tr.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  de: { translation: deTranslations },\n  el: { translation: elTranslations },\n  es: { translation: esTranslations },\n  fa: { translation: faTranslations },\n  fr: { translation: frTranslations },\n  nl: { translation: nlTranslations },\n  tr: { translation: trTranslations }\n};\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    fallbackLng: 'en',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator'],\n    }\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, ThemeProvider } from 'theme-ui';\n\nimport { Global } from '@emotion/core';\nimport * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport { SettingsManager, Provider as SettingsProvider } from './settings';\nimport { Opencast, Provider as OpencastProvider } from './opencast';\nimport { userHasWebcam } from './util';\n\nif (process.env.REACT_APP_ENABLE_SENTRY === '1') {\n  Sentry.init({ dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4' });\n}\n\n// Load the rest of the application and try to fetch the `settings.json`.\nconst initialize = Promise.all([\n  // Load rest of the application code\n  import('./App').then(mod => mod.default),\n\n  // Check for camera devices\n  userHasWebcam(),\n\n  // Load the settings and initialize Opencast\n  SettingsManager.init().then(async settingsManager => {\n    const oc = await Opencast.init(settingsManager.settings().opencast);\n    return [settingsManager, oc];\n  }),\n]);\n\nconst render = body => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\n// After the initialization is done, render to the root element.\ninitialize.then(\n  ([App, userHasWebcam, [settingsManager, opencast]]) => {\n    render(\n      <React.StrictMode>\n        <ThemeProvider theme={theme}>\n          <Global styles={GlobalStyle} />\n          <OpencastProvider initial={opencast}>\n            <SettingsProvider settingsManager={settingsManager}>\n              <App settingsManager={settingsManager} userHasWebcam={userHasWebcam} />\n            </SettingsProvider>\n          </OpencastProvider>\n        </ThemeProvider>\n      </React.StrictMode>\n     );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}