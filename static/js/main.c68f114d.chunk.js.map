{"version":3,"sources":["util.js","settings.js","opencast.js","style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","index.js"],"names":["isDisplayCaptureSupported","navigator","mediaDevices","test","platform","userAgent","isUserCaptureSupported","isRecordingSupported","MediaRecorder","onSafari","dimensionsOf","stream","getVideoTracks","getSettings","width","height","recordingFileName","mime","flavor","title","presenter","titlePart","presenterPart","nowAsString","lowerMime","toLowerCase","startsWith","mimeToExt","pad2","n","now","Date","getFullYear","getMonth","getDate","getHours","getMinutes","userHasWebcam","a","enumerateDevices","devices","some","d","kind","decodeHexString","hex","length","SyntaxError","digitToNum","digit","charCodeAt","RangeError","bytes","Uint8Array","i","substring","TextDecoder","decode","sleep","ms","Promise","resolve","reject","setTimeout","queryMediaDevices","dispatch","type","payload","getUniqueDevices","allDevices","out","od","deviceId","push","SettingsManager","values","contextSettings","urlSettings","onChange","this","userSettings","newSettings","merge","window","localStorage","setItem","JSON","stringify","settings","all","defaultSettings","path","obj","fixedSettings","segments","split","segment","isConfigurable","opencast","loginProvided","allowParse","source","validate","schema","_type","validateValue","validateObj","value","actualType","expectedType","Array","isArray","Number","isInteger","s","console","warn","parseBoolean","parseInteger","parsed","parse","parseArray","expectedElementType","_elements","elem","validateResult","_validate","Object","keys","key","newPath","SCHEMA","self","stored","getItem","rawUserSettings","loadContextSettings","rawContextSettings","urlParams","URLSearchParams","location","search","rawUrlSettings","get","encoded","decoded","e","slice","forEach","upload","acl","fetchAcl","basepath","endsWith","settingsPath","process","REACT_APP_SETTINGS_PATH","base","url","origin","fetch","response","status","debug","ok","error","statusText","headers","json","uploadSettings","contentType","text","serverUrl","loginName","loginPassword","positiveInteger","name","URL","protocol","seriesId","workflowId","v","recording","videoBitrate","mimes","review","disableCutting","display","maxFps","maxHeight","camera","b","deepmerge","arrayMerge","array","destinationArray","sourceArray","options","Context","React","createContext","useSettings","useContext","Provider","settingsManager","children","useState","updateSettings","useEffect","STATE_UNCONFIGURED","STATE_CONNECTED","STATE_LOGGED_IN","STATE_NETWORK_ERROR","STATE_RESPONSE_NOT_OK","STATE_INVALID_RESPONSE","STATE_INCORRECT_LOGIN","UPLOAD_SUCCESS","UPLOAD_NETWORK_ERROR","UPLOAD_NOT_AUTHORIZED","UPLOAD_UNEXPECTED_RESPONSE","Opencast","updateGlobalOc","username","password","newInstance","updateUser","getInfoMe","newUser","RequestError","oldState","NetworkError","Unauthorized","NotOkResponse","UnexpectedRedirect","InvalidJson","hasChanged","ltiSession","userChanged","equal","user","getLti","newLtiSession","ltiChanged","jsonRequest","request","btoa","unescape","encodeURIComponent","credentials","redirect","recordings","creator","start","end","onProgress","refreshConnection","then","mediaPackage","addDcCatalog","attachAcl","uploadTracks","addCuttingInformation","MAX_VALUE","finishIngest","dcc","dcCatalog","body","FormData","append","method","template","DEFAULT_ACL_TEMPLATE","constructAcl","Blob","smil","totalBytes","map","r","media","size","reduce","finishedTracksBytes","deviceType","mimeType","finishedBytes","trackFlavor","downloadName","xhr","XMLHttpRequest","open","setRequestHeader","onload","target","responseText","onerror","onprogress","totalLoaded","loaded","send","hostname","Error","ltiCourseId","context_id","roleOAuthUser","roles","find","defaultReadRoles","userRole","defaultWriteRoles","view","userName","escapeString","Mustache","render","cause","useOpencast","initial","updateDummy","updateOpencast","old","interval","setInterval","clearInterval","XMLSerializer","serializeToString","Text","seriesLine","toISOString","GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","baseButton","fontSize","mr","bg","borderColor","borderWidth","borderStyle","cursor","opacity","breakpoints","space","fonts","monospace","fontSizes","fontWeights","bold","lineHeights","heights","headerHeight","colors","background","primary","secondary","muted","highlight","gray","videoOverlay","buttons","darken","danger","border","theme","cards","boxShadow","maxWidth","position","styles","root","h1","mt","mb","h2","h3","h4","h5","h6","p","pre","overflowX","code","table","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","input","borderRadius","px","py","outline","transition","select","progress","container","mx","resources","en","translation","de","el","es","fa","fr","nl","sl","tr","i18n","use","initReactI18next","LanguageDetector","init","fallbackLng","keySeparator","interpolation","escapeValue","format","lng","seconds","Math","floor","minutes","hours","result","unit","unshift","join","detection","order","Boolean","match","Sentry","dsn","release","initialize","mod","default","oc","race","ReactDOM","document","getElementById","App","StrictMode","message","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c68f114d.chunk.js","sourcesContent":["// Checks if we app is running on a mobile device.\n//\n// This check could be more exhaustive, but this includes all browser we\n// officially support.\nexport const onMobileDevice = () =>\n  /Android|iPhone|iPad|iPod/i.test(navigator.platform) ||\n  /Android/i.test(navigator.userAgent);\n\n// Checks if the client supports capturing the device's display (or individual\n// windows).\n//\n// Detecting whether display capture is supported is hard. There is currently\n// no proper solution. See these two links for more information:\n// - https://stackoverflow.com/q/58842831/2408867\n// - https://github.com/w3c/mediacapture-screen-share/issues/127\n//\n// To work around this problem, we simply check if the browser runs on a\n// mobile device. Currently, no mobile device/browser supports display\n// capture. However, this will probably change in the future, so we have to\n// revisit this issue again. This is tracked in this issue:\n// https://github.com/elan-ev/opencast-studio/issues/204\nexport const isDisplayCaptureSupported = () =>\n  \"mediaDevices\" in navigator &&\n  \"getDisplayMedia\" in navigator.mediaDevices &&\n  !onMobileDevice();\n\n// Checks if the client supports capturing \"user devices\" (usually webcams or\n// phone cameras).\nexport const isUserCaptureSupported = () =>\n  'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices;\n\n// Checks if the browsers supports the `MediaRecorder` API required to actually\n// record the media streams.\nexport const isRecordingSupported = () => typeof MediaRecorder !== 'undefined';\n\n// Checks if this runs in Safari. Check from https://stackoverflow.com/a/23522755/\nexport const onSafari = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n// Returns the dimensions as [w, h] array or `null` if there is no video track.\nexport const dimensionsOf = stream => {\n  const { width, height } = stream?.getVideoTracks()?.[0]?.getSettings() ?? {};\n  return [width, height];\n};\n\n// Converts the MIME type into a file extension.\nexport const mimeToExt = mime => {\n  if (mime) {\n    const lowerMime = mime.toLowerCase();\n    if (lowerMime.startsWith(\"video/webm\")) {\n      return \"webm\";\n    }\n    if (lowerMime.startsWith(\"video/mp4\")) {\n      return \"mp4\";\n    }\n    if (lowerMime.startsWith(\"video/x-matroska\")) {\n      return \"mkv\";\n    }\n    if (lowerMime.startsWith(\"video/avi\")) {\n      return \"avi\";\n    }\n    if (lowerMime.startsWith(\"video/quicktime\")) {\n      return \"mov\";\n    }\n  }\n\n  // If we know nothing, our best guess is webm; except for Safari which does\n  // not understand webm: there it's mp4.\n  return onSafari() ? \"mp4\" : \"webm\";\n};\n\n// Returns a suitable filename for a recording with the MIME type `mime` and the\n// given `flavor`. The latter should be either `presenter` or `presentation`.\n// `mime` can be null or a string and is converted to a file extension on a best\n// effort basis.\nexport const recordingFileName = ({ mime, flavor, title, presenter }) => {\n  const titlePart = title ? ` - ${title}` : '';\n  const presenterPart = presenter ? ` - ${presenter}` : '';\n  return `${nowAsString()}${titlePart}${presenterPart} (${flavor}, OC Studio).${mimeToExt(mime)}`;\n};\n\nconst nowAsString = () => {\n  const pad2 = n => (n >= 10 ? '' : '0') + n;\n\n  const now = new Date();\n  return ''\n    + now.getFullYear() + '-'\n    + pad2(now.getMonth() + 1) + '-'\n    + pad2(now.getDate()) + ' '\n    + pad2(now.getHours()) + '-'\n    + pad2(now.getMinutes());\n};\n\nexport const userHasWebcam = async () => {\n  if (!('mediaDevices' in navigator)) {\n    return false;\n  }\n\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  return devices.some(d => d.kind === 'videoinput');\n};\n\n// Decodes the given hex string into a new string. If the given string contains\n// characters that are not hexadecimal digits or if the string's length is odd,\n// this function will throw an exception.\nexport const decodeHexString = hex => {\n  if (hex.length % 2 !== 0) {\n    throw new SyntaxError('hex string does not have an even length');\n  }\n\n  const digitToNum = digit => {\n    if (digit >= '0' && digit <= '9') {\n      return digit.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if (digit >= 'a' && digit <= 'f') {\n      return digit.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    } else if (digit >= 'A' && digit <= 'F') {\n      return digit.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      throw new RangeError(`invalid hex digit '${digit}'`);\n    }\n  };\n\n  let bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = 16 * digitToNum(hex.substring(i, i + 1))\n      + digitToNum(hex.substring(i + 1, i + 2));\n  }\n\n  return new TextDecoder().decode(bytes);\n};\n\n// Returns a promise that resolves after `ms` milliseconds.\nexport const sleep = ms => new Promise((resolve, reject) => setTimeout(resolve, ms));\n\n// Obtains all media devices and stores them into the global state.\nexport const queryMediaDevices = async (dispatch) => {\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  dispatch({ type: 'UPDATE_MEDIA_DEVICES', payload: devices });\n};\n\n// Filters the `allDevices` array such that only devices with the given `kind`\n// are included and no two devices have the same `deviceId`.\nexport const getUniqueDevices = (allDevices, kind) => {\n  let out = [];\n  for (const d of allDevices) {\n    // Only interested in one kind of device.\n    if (d.kind !== kind) {\n      continue;\n    }\n\n    // If we already have a device with that device ID, we ignore it.\n    if (out.some(od => od.deviceId === d.deviceId)) {\n      continue;\n    }\n\n    out.push(d);\n  }\n\n  return out;\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport deepmerge from 'deepmerge';\nimport { decodeHexString } from './util';\n\n\nconst LOCAL_STORAGE_KEY = 'ocStudioSettings';\nconst CONTEXT_SETTINGS_FILE = 'settings.json';\n\n// Responsible for obtaining settings from different places (context settings,\n// local storage, query parameter) and merging them appropriately.\nexport class SettingsManager {\n  // The settings set by the server. These cannot be edited by the user. If the\n  // server did not specify any settings, this is `{}`.\n  contextSettings = {};\n\n  // These settings are given in the query part of the URL (e.g.\n  // `?opencast.loginName=peter`). If there are no settings in the URL, this\n  // is `{}`.\n  urlSettings = {};\n\n  // The settings set by the user and stored in local storage. This is `{}` if\n  // there were no settings in local storage.\n  #userSettings = {};\n\n  // This function is called whenever the user saved their settings. The new\n  // settings object is passed as parameter.\n  onChange = null;\n\n  // This constructor is mainly used for tests. Use `init()` to get an instance\n  // for the real application.\n  constructor(values) {\n    if (values) {\n      if (values.contextSettings) {\n        this.contextSettings = values.contextSettings;\n      }\n      if (values.urlSettings) {\n        this.urlSettings = values.urlSettings;\n      }\n      if (values.userSettings) {\n        this.#userSettings = values.userSettings;\n      }\n    }\n  }\n\n  // Creates a new `Settings` instance by loading user settings from local\n  // storage and attempting to load context settings from `/settings.json`.\n  static async init() {\n    let self = new SettingsManager();\n\n    // Load the user settings from local storage\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored !== null) {\n      let rawUserSettings;\n      try {\n        rawUserSettings = JSON.parse(stored);\n      } catch {\n        console.warn(\"Could not parse settings stored in local storage. Ignoring.\");\n      }\n      self.#userSettings = self.validate(\n        rawUserSettings,\n        false,\n        'from local storage user settings',\n      );\n    }\n\n    const rawContextSettings = await SettingsManager.loadContextSettings() || {};;\n    self.contextSettings = self.validate(rawContextSettings, false, 'specified in \\'settings.json\\'');\n\n    // Get settings from URL query.\n    const urlParams = new URLSearchParams(window.location.search);\n\n    let rawUrlSettings = {};\n    if (urlParams.get('config')) {\n      // In this case, the GET parameter `config` is specified. We now expect a\n      // hex encoded stringified JSON object describing the configuration. This\n      // is possible in cases where special characters in GET parameters might\n      // get modified somehow (e.g. by an LMS). A config=hexstring only uses\n      // the most basic characters, so it should always work.\n\n      const encoded = urlParams.get('config');\n      try {\n        const decoded = decodeHexString(encoded);\n        rawUrlSettings = JSON.parse(decoded);\n      } catch (e) {\n        console.warn(\n          `Could not decode and parse hex-encoded JSON string given to GET parameter `\n          + `'config'. Ignoring. Error:`,\n          e,\n        );\n      }\n\n      for (const key of urlParams.keys()) {\n        if (key !== 'config') {\n          console.warn(\n            `URL GET parameter '${key}' is ignored as 'config' is specified. Either specify `\n            + ` all configuration via the 'config' GET parameter hex string or via direct GET `\n            + `parameters. Mixing is not allowed.`\n          );\n        }\n      }\n    } else {\n      // Interpret each get parameter as single configuration value.\n      for (let [key, value] of urlParams) {\n        // Create empty objects for full path (if the key contains '.') and set\n        // the value at the end.\n        let obj = rawUrlSettings;\n        const segments = key.split('.');\n        segments.slice(0, -1).forEach((segment) => {\n          if (!(segment in obj)) {\n            obj[segment] = {};\n          }\n          obj = obj[segment];\n        });\n        obj[segments[segments.length - 1]] = value;\n      }\n    }\n\n    self.urlSettings = self.validate(rawUrlSettings, true, 'given as URL GET parameter');\n\n    // We have to do some special treatment of the `upload.acl` property. Users\n    // cannot set this setting, so we only have to check urlSettings and\n    // contextSettings.\n    if (typeof self.urlSettings.upload?.acl !== 'undefined') {\n      await SettingsManager.fetchAcl(self.urlSettings.upload);\n    } else if (typeof self.contextSettings.upload?.acl !== 'undefined') {\n      await SettingsManager.fetchAcl(self.contextSettings.upload);\n    }\n\n    return self;\n  }\n\n  // Attempts to loads `settings.json`. If it fails for some reason, returns\n  // `null` and prints an appropriate message on console.\n  static async loadContextSettings() {\n    // Try to retrieve the context settings.\n    let basepath = process.env.PUBLIC_URL || '/';\n    if (!basepath.endsWith('/')) {\n      basepath += '/';\n    }\n\n    // Construct path to settings JSON file. If the `REACT_APP_SETTINGS_PATH` is\n    // given and starts with '/', it is interpreted as absolute path from the\n    // server root.\n    const settingsPath = process.env.REACT_APP_SETTINGS_PATH || CONTEXT_SETTINGS_FILE;\n    const base = settingsPath.startsWith('/') ? '' : basepath;\n    const url = `${window.location.origin}${base}${settingsPath}`;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (e) {\n      console.warn('Could not access `settings.json` due to network error!', e || \"\");\n      return null;\n    }\n\n    if (response.status === 404) {\n      // If `settings.json` was not found, we silently ignore the error. We\n      // expecet many installation to now provide this file.\n      console.debug(\"`settings.json` returned 404: ignoring\");\n      return null;\n    } else if (!response.ok) {\n      console.error(\n        `Fetching 'settings.json' failed: ${response.status} ${response.statusText}`\n      );\n      return null;\n    }\n\n    if (!response.headers.get('Content-Type').startsWith('application/json')) {\n      console.warn(\n        \"'settings.json' request does not have 'Content-Type: application/json' -> ignoring...\"\n      );\n      return null;\n    }\n\n    try {\n      return await response.json();\n    } catch(e) {\n      console.error(\"Could not parse 'settings.json': \", e);\n      throw new SyntaxError(`Could not parse 'settings.json': ${e}`);\n    }\n  }\n\n  static async fetchAcl(uploadSettings) {\n    if (uploadSettings.acl === 'false' || uploadSettings.acl === false) {\n      uploadSettings.acl = false;\n      return;\n    } else if (typeof uploadSettings.acl === 'string') {\n      // Try to retrieve the context settings.\n      let basepath = process.env.PUBLIC_URL || '/';\n      if (!basepath.endsWith('/')) {\n        basepath += '/';\n      }\n\n      // Construct path to settings XML file. If the `uploadSettings.acl`\n      // starts with '/', it is interpreted as absolute path from the server\n      // root.\n      const base = uploadSettings.acl.startsWith('/') ? '' : basepath;\n      const url = `${window.location.origin}${base}${uploadSettings.acl}`;\n\n      // Try to download ACL template file\n      let response;\n      try {\n        response = await fetch(url);\n      } catch (e) {\n        console.error(\n          `Could not access ACL template '${url}' due to network error! Using default ACLs.`,\n          e || \"\",\n        );\n        uploadSettings.acl = true;\n        return;\n      }\n\n      // Check for 404 error\n      if (response.status === 404) {\n        console.error(`ACL template '${url}' returned 404! Using default ACLs`);\n        uploadSettings.acl = true;\n        return;\n      } else if (!response.ok) {\n        console.error(\n          `Fetching ACL template '${url}' failed: ${response.status} ${response.statusText}`\n        );\n        uploadSettings.acl = true;\n        return;\n      }\n\n      // Warn if the content type of the request is unexpected. We still use the\n      // response as, opposed to `settings.xml`, the path is explicitly set.\n      const contentType = response.headers.get('Content-Type');\n      if (!contentType.startsWith('application/xml') && !contentType.startsWith('text/xml')) {\n        console.warn(\n          `ACL template request '${url}' does not have 'Content-Type: application/xml' or 'Content-Type: text/xml'. `\n          + `This could be a bug. Using the response as ACL template anyway.`\n        );\n      }\n\n      // Finally, set the setting to the template string.\n      uploadSettings.acl = await response.text();\n    } else {\n      uploadSettings.acl = true;\n      console.warn(\n        `'upload.acl' has invalid value (has to be 'false' or a path to an XML `\n        + `template file. Using default ACLs.`\n      );\n      return;\n    }\n  }\n\n  // Stores the given `newSettings` as user settings. The given object might be\n  // partial, i.e. only the new values can be specified. Values in `newSettings`\n  // override values in the old user settings.\n  saveSettings(newSettings) {\n    this.#userSettings = merge(this.#userSettings, newSettings);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.#userSettings));\n    if (this.onChange) {\n      this.onChange(this.settings());\n    }\n  }\n\n  // The merged settings that the whole application should use.\n  settings() {\n    return merge.all([this.#userSettings, this.contextSettings, this.urlSettings]);\n  }\n\n  // The values for the settings forms. These are simply the user settings with\n  // missing settings filled by `defaultSettings`.\n  formValues() {\n    return merge(defaultSettings, this.#userSettings);\n  }\n\n  fixedSettings() {\n    return merge(this.contextSettings, this.urlSettings);\n  }\n\n  // Returns whether a specific setting is configurable by the user. It is not\n  // if the setting is fixed by the context setting or an URL setting. The path\n  // is given as string. Example: `manager.isConfigurable('opencast.loginName')`\n  isConfigurable(path) {\n    let obj = this.fixedSettings();\n    const segments = path.split('.');\n    for (const segment of segments) {\n      if (!(segment in obj)) {\n        return true;\n      }\n      obj = obj[segment];\n    }\n\n    return false;\n  }\n\n  isUsernameConfigurable() {\n    return this.isConfigurable('opencast.loginName')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n  isPasswordConfigurable() {\n    return this.isConfigurable('opencast.loginPassword')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n\n  // Validate the given `obj` with the global settings `SCHEMA`. If `allowParse`\n  // is true, string values are attempted to parse into the expected type.\n  // `source` is just a string for error messages specifying where `obj` comes\n  // from.\n  validate(obj, allowParse, source) {\n    const parseBoolean = (s, path) => {\n      switch (s) {\n        case 'true':\n          return true;\n\n        case 'false':\n          return false;\n\n        default:\n          console.warn(\n            `Settings value '${path}' (${source}) can't be parsed as 'boolean' `\n            + ` (value: '${s}'). Ignoring.`\n          );\n          return null;\n      }\n    };\n\n    const parseInteger = (s, path) => {\n      if (/^[-+]?(\\d+)$/.test(s)) {\n        return Number(s);\n      } else {\n        console.warn(\n          `Settings value '${path}' (${source}) can't be parsed as integer `\n          + `(value: '${s}'). Ignoring.`\n        );\n        return null;\n      }\n    };\n\n    const parseArray = (s, path) => {\n      try {\n        const parsed = JSON.parse(s);\n        if (!Array.isArray(parsed)) {\n          console.warn(\n            `Settings value '${path}' (${source}) is not an 'array' (value: '${s}'). Ignoring.`\n          );\n          return null;\n        }\n\n        return parsed;\n      } catch {\n        console.warn(\n          `Settings value '${path}' (${source}) can't be parsed as its `\n          + `expected type 'array' (value: '${s}'). Ignoring.`\n        );\n        return null;\n      }\n    };\n\n    // Validates `obj` with `schema`. `path` is the current path used for error\n    // messages.\n    const validate = (schema, obj, path) => {\n      if (typeof schema === 'string' || typeof schema._type === 'string') {\n        return validateValue(schema, obj, path);\n      } else {\n        return validateObj(schema, obj, path);\n      }\n    };\n\n    // Validate a settings value. `schema` should either be a string specifying\n    // the expected type or an object with these fields:\n    //\n    // - `_type`: a string specifying the expected type\n    // - `_validate` (optional): a function returning either `true` (validation\n    //   successful) or a string (validation error).\n    // - `_elements`: Only if `_type` is 'array'! Specifies type and validation\n    //   function for array elements. Object with fields `_type` and optionally\n    //   `_validate`.\n    const validateValue = (schema, value, path) => {\n      // Check the type of this value.\n      const expectedType = typeof schema === 'string' ? schema : schema._type;\n      let actualType;\n      if (Array.isArray(value)) {\n        actualType = 'array';\n      } else if (Number.isInteger(value)) {\n        actualType = 'int';\n      } else {\n        actualType = typeof value;\n      }\n\n      let out = null;\n      if (expectedType === 'any' || actualType === expectedType) {\n        out = value;\n      } else {\n        if (actualType === 'string' && allowParse) {\n          switch (expectedType) {\n            case 'boolean': out = parseBoolean(value, path); break;\n            case 'int': out = parseInteger(value, path); break;\n            case 'array': out = parseArray(value, path); break;\n            default:\n              console.warn(`internal bug: unknown type ${expectedType}. Ignoring ${path}.`);\n          }\n        } else {\n          console.warn(\n            `Settings value '${path}' (${source}) should be of type '${expectedType}', but is `\n            + `'${actualType}' (${value}). Ignoring.`\n          );\n        }\n      }\n\n      // Check type of array elements and validate those.\n      if (Array.isArray(out) && typeof schema === 'object' && '_elements' in schema) {\n        const expectedElementType = typeof schema._elements === 'string'\n          ? schema._elements\n          : schema._elements._type;\n\n        for (const elem of out) {\n          if (typeof elem !== expectedElementType) {\n            console.warn(\n              `Some elements of array value '${path}' (${source}) are not of type `\n              + `'${expectedElementType}'. Ignoring complete array.`\n            );\n            return null;\n          }\n\n          if (typeof schema._elements === 'object' && '_validate' in schema._elements) {\n            const validateResult = schema._elements._validate(elem);\n            if (validateResult !== true) {\n              console.warn(\n                `Validation of one element in array setting value '${path}' (${source}) `\n                + `failed: ${validateResult}. Ignoring complete array.`\n              );\n              return null;\n            }\n          }\n        }\n      }\n\n      // Run validation function if the type was correct and a validation is\n      // specified.\n      if (out !== null && typeof schema === 'object' && '_validate' in schema) {\n        const validateResult = schema._validate(out);\n        if (validateResult !== true) {\n          console.warn(\n            `Validation of setting value '${path}' (${source}) failed: ${validateResult}. `\n            + `Ignoring.`\n          );\n          return null;\n        }\n      }\n\n      return out;\n    };\n\n    // Validate a settings object/namespace. `schema` and `obj` need to be\n    // objects.\n    const validateObj = (schema, obj, path) => {\n      // We iterate through all keys of the given settings object, checking if\n      // each key is valid and recursively validating the value of that key.\n      let out = {};\n      for (const key of Object.keys(obj)) {\n        const newPath = path ? `${path}.${key}` : key;\n        if (key in schema) {\n          const value = validate(schema[key], obj[key], newPath);\n\n          // If `null` is returned, the validation failed and we ignore this\n          // value.\n          if (value !== null) {\n            out[key] = value;\n          }\n        } else {\n          console.warn(\n            `'${newPath}' (${source}) is not a valid settings key. Ignoring.`\n          );\n        }\n      }\n\n      return out;\n    };\n\n    return validate(SCHEMA, obj, \"\");\n  }\n}\n\n\nexport const validateServerUrl = value => {\n  if (value === '/' || value === '') {\n    return true;\n  }\n\n  try {\n    const url = new URL(value);\n    return (url.protocol === 'https:' || url.protocol === 'http:')\n      || 'the URL does not start with \"http:\" or \"https:\"';\n  } catch (e) {\n    return 'not a valid URL';\n  }\n};\n\n\nconst defaultSettings = {\n  opencast: {\n    serverUrl: 'https://develop.opencast.org/',\n    loginName: 'admin',\n    loginPassword: 'opencast',\n  },\n};\n\nconst positiveInteger = name => ({\n  _type: 'int',\n  _validate: i => i > 0 || `'${name}' has to be positive, but is '${i}'`,\n});\n\n// Defines all potential settings and their types\nconst SCHEMA = {\n  opencast: {\n    serverUrl: {\n      _type: 'string',\n      _validate: validateServerUrl,\n    },\n    loginName: 'string',\n    loginPassword: 'string',\n    loginProvided: 'boolean',\n  },\n  upload: {\n    seriesId: 'string',\n    workflowId: 'string',\n    // This gets some special treatment in `fetchAcl`. After `fetchAcl` is\n    // done, this one of:\n    // - undefined: setting was not set.\n    // - `false`: do not send any ACLs when uploading\n    // - `true`: explictely send default ACLs when uploading (this is the default behavior)\n    // - ACL template string: already fetched ACL template string.\n    acl: {\n      _type: 'any',\n      _validate: v => (\n        v === false || typeof v === 'string' || `'upload.acl' needs to be 'false' or a string`\n      ),\n    },\n  },\n  recording: {\n    videoBitrate: positiveInteger('bitrate'),\n    mimes: {\n      _type: 'array',\n      _elements: {\n        _type: 'string',\n      }\n    },\n  },\n  review: {\n    disableCutting: 'boolean',\n  },\n  display: {\n    maxFps: positiveInteger('display.maxFps'),\n    maxHeight: positiveInteger('display.maxHeight'),\n  },\n  camera: {\n    maxFps: positiveInteger('camera.maxFps'),\n    maxHeight: positiveInteger('camera.maxHeight'),\n  },\n};\n\n\n// Custumize array merge behavior\nlet merge = (a, b) => {\n  return deepmerge(a, b, { arrayMerge });\n};\nmerge.all = array => deepmerge.all(array, { arrayMerge })\nconst arrayMerge = (destinationArray, sourceArray, options) => sourceArray;\n\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useSettings = () => React.useContext(Context);\n\nexport const Provider = ({ settingsManager, children }) => {\n  const [settings, updateSettings] = useState(settingsManager.settings());\n  settingsManager.onChange = newSettings => updateSettings(newSettings);\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current settings: \", settings);\n  });\n\n  return (\n    <Context.Provider value={settings}>\n      {children}\n    </Context.Provider>\n  );\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport equal from 'fast-deep-equal';\nimport Mustache from 'mustache';\n\nimport { recordingFileName } from './util.js';\n\n\n// The server URL was not specified.\nexport const STATE_UNCONFIGURED = 'unconfigured';\n\n// The OC server is reachable but a login was not attempted and the current user\n// is anonymous.\nexport const STATE_CONNECTED = 'connected';\n\n// The OC server is reachable and the user is authenticated.\nexport const STATE_LOGGED_IN = 'logged_in';\n\n// Some network error occured when accessing the server.\nexport const STATE_NETWORK_ERROR = 'network_error';\n\n// When accessing the OC API, the request returned as non-2xx code unexpectedly.\n// This likely indicates that the server is not actually a valid OC server.\nexport const STATE_RESPONSE_NOT_OK = 'response_not_ok';\n\n// The API requested returned invalid JSON or unexpected data.\nexport const STATE_INVALID_RESPONSE = 'invalid_response';\n\n// The server is reachable and a login was provided, but the login did not\n// succeed.\nexport const STATE_INCORRECT_LOGIN = 'incorrect_login';\n\nexport const UPLOAD_SUCCESS = 'upload_success';\nexport const UPLOAD_NETWORK_ERROR = 'upload_network_error';\nexport const UPLOAD_NOT_AUTHORIZED = 'upload_not_authorized';\nexport const UPLOAD_UNEXPECTED_RESPONSE = 'upload_unexpected_response';\nexport const UPLOAD_UNKNOWN_ERROR = 'upload_unknown_error';\n\n\nexport class Opencast {\n  #state = STATE_UNCONFIGURED;\n  #serverUrl = null;\n\n  // This can one of either:\n  // - `null`: no login is provided and login data is not specified\n  // - `true`: a login is already automatically provided from the OC context\n  // - `{ username, password }`: username and password are given\n  #login = null;\n\n  // The response of `/info/me.json` or `null` if requesting that API did not\n  // succeed.\n  #currentUser = null;\n\n  // The response from `/lti` or `null` if the request failed for some reason or\n  // if `this.#login !== true`. Note though, that this can also be the empty\n  // object, indicating that there is no LTI session.\n  #ltiSession = null;\n\n  updateGlobalOc = null;\n\n\n  constructor(settings) {\n    // If the server URL is not given, we stay in unconfigured state and\n    // immediately return.\n    if (!settings?.serverUrl) {\n      return;\n    }\n\n    this.#serverUrl = settings.serverUrl.endsWith('/')\n      ? settings.serverUrl.slice(0, -1)\n      : settings.serverUrl;\n\n    if (settings.loginProvided === true) {\n      // Here we can assume Studio is running within an Opencast instance and\n      // the route to Studio is protected via login. This means that login\n      // cookies are already present and we don't need to worry about that.\n      this.#login = true;\n    } else if (settings.loginName && settings.loginPassword) {\n      // Studio is not running in OC context, but username and password are\n      // provided.\n      this.#login = {\n        username: settings.loginName,\n        password: settings.loginPassword,\n      };\n    } else {\n      // Login is not yet provided.\n      this.#login = null;\n    }\n  }\n\n  // Creates a new instance from the settings and calls `updateUser` on it.\n  static async init(settings) {\n    let self = new Opencast(settings);\n    await self.updateUser();\n    return self;\n  }\n\n  // Updates the global OC instance from `this` to `newInstance`.\n  setGlobalInstance(newInstance) {\n    if (!this.updateGlobalOc) {\n      console.error(\"bug: 'updateGlobalOc' not set\");\n    }\n\n    this.updateGlobalOc(newInstance);\n  }\n\n  // Refreshes the connection by requesting `info/me` unless the state is\n  // 'unconfigured'.\n  //\n  // If the request errors or returns a different user, the global Opencast\n  // instance is updated.\n  async refreshConnection() {\n    if (this.#serverUrl === null) {\n      return;\n    }\n\n    // Request to `info/me` and update if necessary.\n    const changed = await this.updateUser();\n    if (changed) {\n      this.updateGlobalOc?.(this);\n    }\n  }\n\n  // Updates `#currentUser` and `#ltiSession` by checking 'info/me.json' and\n  // `/lti` respectively.\n  //\n  // The `#state` is also updated accordingly to `STATE_LOGGED_IN`,\n  // `STATE_INCORRECT_LOGIN` or `STATE_CONNECTED` (or any error state on request\n  // error). This method returns whether the state, user object or lti object\n  // has changed in any way.\n  async updateUser() {\n    // Try to request `info/me.json` and handle potential errors.\n    let newUser;\n    try {\n      newUser = await this.getInfoMe();\n    } catch (e) {\n      // If it's not our own error, rethrow it.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error('error when getting info/me', e);\n\n      const oldState = this.#state;\n\n      // Update state, depending on kind of error.\n      if (e instanceof NetworkError) {\n        this.#state = STATE_NETWORK_ERROR;\n      } else if (e instanceof Unauthorized) {\n        this.#state = STATE_INCORRECT_LOGIN;\n      } else if (e instanceof NotOkResponse) {\n        this.#state = STATE_RESPONSE_NOT_OK;\n      } else if (e instanceof UnexpectedRedirect) {\n        // This might be too much of an assumption, but we interpret any\n        // redirect as redirect to the login page, indicating that the user is\n        // not logged in/does not have sufficient rights. Usually\n        // `/info/me.json` is available to anonymous users, so we should never\n        // get redirected. But this can be reconfigured.\n        this.#state = STATE_INCORRECT_LOGIN;\n      } else if (e instanceof InvalidJson) {\n        this.#state = STATE_INVALID_RESPONSE;\n      }\n\n      const hasChanged = this.#currentUser !== null\n        || this.ltiSession !== null\n        || oldState !== this.#state;\n      this.#currentUser = null;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    const userChanged = !equal(newUser, this.#currentUser);\n    if (userChanged) {\n      this.#currentUser = newUser;\n      if (newUser?.user?.username === 'anonymous') {\n        this.#state = this.#login ? STATE_INCORRECT_LOGIN : STATE_CONNECTED;\n      } else if (newUser?.user?.username) {\n        this.#state = STATE_LOGGED_IN;\n      } else {\n        this.#state = STATE_INVALID_RESPONSE;\n      }\n    }\n\n    // Only check LTI context information if we are in an integrated situation.\n    // If the user authenticates via username/password (via HTTP basic auth),\n    // there is never an LTI session. (Well, at least the people I talked to\n    // think so).\n    if (this.#login !== true) {\n      const hasChanged = userChanged || this.#ltiSession !== null;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    // Attempt to fetch LTI information and handle potential errors.\n    let newLtiSession;\n    try {\n      newLtiSession = await this.getLti();\n    } catch (e) {\n      // If it's not our own error, rethrow it.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error('Error when getting LTI info: ', e);\n\n      const oldState = this.#state;\n\n      if (e instanceof NetworkError) {\n        // Highly unlikely as the previous request suceeded.\n        this.#state = STATE_NETWORK_ERROR;\n      } else if (e instanceof Unauthorized || e instanceof UnexpectedRedirect) {\n        // It might be that the user has not access to this endpoint. In this\n        // case, there is no LTI session. We do not switch to an error state.\n      } else {\n        // In the cases of strange or invalid responses, we just ignore it for\n        // now. I don't know when that would occur. No need to switch to an\n        // error state for now.\n      }\n\n      const hasChanged = userChanged || this.#ltiSession !== null || oldState !== this.#state;\n      this.#ltiSession = null;\n      return hasChanged;\n    }\n\n    const ltiChanged = !equal(newLtiSession, this.#ltiSession);\n    this.#ltiSession = newLtiSession;\n\n    return userChanged || ltiChanged;\n  }\n\n  // Returns the response from the `/info/me.json` endpoint.\n  async getInfoMe() {\n    return await this.jsonRequest('info/me.json');\n  }\n\n  // Returns the response from the `/lti` endpoint.\n  async getLti() {\n    return await this.jsonRequest('lti');\n  }\n\n  // Sends a request to the Opencast API expecting a JSON response.\n  //\n  // On success, the parsed JSON is returned as object. If anything goes wrong,\n  // a `RequestError` is thrown and the corresponding `this.#state` is set.\n  async jsonRequest(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n    const response = await this.request(path, options);\n\n    try {\n      return await response.json();\n    } catch(e) {\n      throw new InvalidJson(url, e);\n    }\n  }\n\n  // Sends a request to the Opencast API, returning the response object.\n  //\n  // If anything goes wrong, a `RequestError` is thrown and the corresponding\n  // `this.#state` is set.\n  async request(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n\n    // Add HTTP Basic Auth headers if username and password are provided.\n    let headers = {};\n    if (this.#login?.username && this.#login?.password) {\n      const encoded = btoa(unescape(encodeURIComponent(\n        this.#login.username + ':' + this.#login.password\n      )));\n      headers = { 'Authorization': `Basic ${encoded}` };\n    }\n\n    let response;\n    try {\n      response = await fetch(url, {\n        ...options,\n        credentials: 'same-origin',\n        redirect: 'manual',\n        headers,\n      });\n    } catch (e) {\n      throw new NetworkError(url, e);\n    }\n\n    // Handle 401 Bad credentials for HTTP Basic Auth\n    if (response.status === 401 || response.status === 403) {\n      throw new Unauthorized(response.status, response.statusText, url);\n    }\n\n    if (response.type === 'opaqueredirect') {\n      throw new UnexpectedRedirect(url);\n    }\n\n    if (!response.ok && response.type !== 'opaqueredirect') {\n      throw new NotOkResponse(response.status, response.statusText, url);\n    }\n\n    return response;\n  }\n\n  // Uploads the given recordings with the given title and creator metadata.\n  //\n  // If the upload was successful, `UPLOAD_SUCCESS` is returned. Otherwise:\n  // - `UPLOAD_NETWORK_ERROR` if some kind of network error occurs.\n  // - `UPLOAD_NOT_AUTHORIZED` if some error occurs that indicates the user is\n  //   not logged in or lacking rights.\n  // - `UPLOAD_UNEXPECTED_RESPONSE` if the API returned data that we didn't\n  //   expect.\n  // - `UPLOAD_UNKNOWN_ERROR` if any other error occurs.\n  //\n  // At the start of this method, `refreshConnection` is called. That\n  // potentially changed the `state`.\n  async upload({ recordings, title, creator, start, end, uploadSettings, onProgress }) {\n    // Refresh connection and check if we are ready to upload.\n    await this.refreshConnection();\n    switch (this.#state) {\n      case STATE_LOGGED_IN:\n        break;\n      case STATE_NETWORK_ERROR:\n        return UPLOAD_NETWORK_ERROR;\n      case STATE_INCORRECT_LOGIN:\n      case STATE_CONNECTED:\n        return UPLOAD_NOT_AUTHORIZED;\n      case STATE_INVALID_RESPONSE:\n        return UPLOAD_UNEXPECTED_RESPONSE;\n      default:\n        return UPLOAD_UNKNOWN_ERROR;\n    }\n\n    // Actually upload\n    try {\n      // Create new media package\n      let mediaPackage = await this.request(\"ingest/createMediaPackage\")\n        .then(response => response.text());\n\n      // Add metadata to media package\n      mediaPackage = await this.addDcCatalog({ mediaPackage, uploadSettings, title, creator });\n\n      // Set appropriate ACL unless the configuration says no.\n      if (uploadSettings?.acl !== false) {\n        mediaPackage = await this.attachAcl({ mediaPackage, uploadSettings });\n      }\n\n      // Add all recordings (this is the actual upload).\n      mediaPackage = await this.uploadTracks(\n        { mediaPackage, recordings, onProgress, title, creator }\n      );\n\n      if (start != null || end != null) {\n        mediaPackage = await this.addCuttingInformation({\n          mediaPackage,\n          // We set the defaults here, instead of in the state,\n          // so that we don't even have to send a SMIL catalog,\n          // when the user didn't cut at all.\n          start: start || 0,\n          end: end || Number.MAX_VALUE,\n        });\n      }\n\n      // Finalize/ingest media package\n      await this.finishIngest({ mediaPackage, uploadSettings });\n\n      return UPLOAD_SUCCESS;\n    } catch(e) {\n      // Any error not thrown by us is rethrown.\n      if (!(e instanceof RequestError)) {\n        throw e;\n      }\n\n      console.error(\"Error occured during upload: \", e);\n\n      if (e instanceof NetworkError) {\n        return UPLOAD_NETWORK_ERROR;\n      } else if (e instanceof UnexpectedRedirect || e instanceof Unauthorized) {\n        // Again, we boldly assume that any redirect is a redirect to the login\n        // page. This might be wrong, but until someone has a problem, this is\n        // the sanest option IMO. A well-designed API shouldn't redirect in\n        // those cases, of course. But we are not dealing with such an API here.\n        return UPLOAD_NOT_AUTHORIZED;\n      } else if (e instanceof NotOkResponse) {\n        return UPLOAD_UNEXPECTED_RESPONSE;\n      } else {\n        return UPLOAD_UNKNOWN_ERROR;\n      }\n    }\n  }\n\n  // Adds the DC Catalog with the given metadata to the current ingest process\n  // via `ingest/addDCCatalog`. Do not call this method outside of `upload`!\n  async addDcCatalog({ mediaPackage, title, creator, uploadSettings }) {\n    const seriesId = uploadSettings?.seriesId;\n\n    const dcc = dcCatalog({ creator, title, seriesId });\n    const body = new FormData();\n    body.append('mediaPackage', mediaPackage);\n    body.append('dublinCore', encodeURIComponent(dcc));\n    body.append('flavor', 'dublincore/episode');\n\n    return await this.request(\"ingest/addDCCatalog\", { method: 'post', body })\n      .then(response => response.text());\n  }\n\n  // Adds the ACL to the current ingest process via `ingest/addAttachment`. Do\n  // not call this method outside of `upload`!\n  async attachAcl({ mediaPackage, uploadSettings }) {\n    const template = uploadSettings?.acl === true || (!uploadSettings?.acl)\n      ? DEFAULT_ACL_TEMPLATE\n      : uploadSettings?.acl;\n    const acl = this.constructAcl(template);\n\n    const body = new FormData();\n    body.append('flavor', 'security/xacml+episode');\n    body.append('mediaPackage', mediaPackage);\n    body.append('BODY', new Blob([acl]), 'acl.xml');\n\n    return await this.request(\"ingest/addAttachment\", { method: 'post', body: body })\n      .then(response => response.text());\n  }\n\n  // Adds a SMIL catalog for Opencast to cut the video during processing\n  addCuttingInformation({ mediaPackage, start, end }) {\n    const body = new FormData();\n    body.append('flavor', 'smil/cutting');\n    body.append('mediaPackage', mediaPackage);\n    body.append('BODY', new Blob([smil({ start, end })]), 'cutting.smil');\n    return this.request(\"ingest/addCatalog\", { method: 'post', body })\n      .then(response => response.text());\n  }\n\n  // Uploads the given recordings to the current ingest process via\n  // `ingest/addTrack`. Do not call this method outside of `upload`!\n  async uploadTracks({ mediaPackage, recordings, onProgress, title, creator }) {\n    const totalBytes = recordings.map(r => r.media.size).reduce((a, b) => a + b, 0);\n    let finishedTracksBytes = 0;\n\n    for (const { deviceType, media, mimeType } of recordings) {\n      const finishedBytes = finishedTracksBytes;\n      let trackFlavor = 'presentation/source';\n      if (deviceType === 'desktop') {\n        trackFlavor = 'presentation/source';\n      } else if (deviceType === 'video') {\n        trackFlavor = 'presenter/source';\n      }\n\n      const flavor = deviceType === 'desktop' ? 'presentation' : 'presenter';\n      const downloadName = recordingFileName({ mimeType, flavor, title, presenter: creator });\n\n      const body = new FormData();\n      body.append('mediaPackage', mediaPackage);\n      body.append('flavor', trackFlavor);\n      body.append('tags', '');\n      body.append('BODY', media, downloadName);\n\n      // We have to upload with XHR here, as `fetch` does not currently offer a\n      // way to get the upload progress. Meh.\n      const url = `${this.#serverUrl}/ingest/addTrack`;\n      mediaPackage = await new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', url);\n\n        // Add HTTP Basic Auth headers if username and password are provided.\n        if (this.#login?.username && this.#login?.password) {\n          const encoded = btoa(unescape(encodeURIComponent(\n            this.#login.username + ':' + this.#login.password\n          )));\n          xhr.setRequestHeader('Authorization', `Basic ${encoded}`);\n        }\n\n        xhr.onload = e => resolve(e.target.responseText);\n        xhr.onerror = () => {\n          // Handle 401 Bad credentials for HTTP Basic Auth\n          if (xhr.status === 401 || xhr.status === 403) {\n            reject(new Unauthorized(xhr.status, xhr.statusText, url));\n          } else {\n            reject(new NotOkResponse(xhr.status, xhr.statusText, url));\n          }\n        };\n        xhr.upload.onprogress = e => {\n          if (onProgress) {\n            const totalLoaded = e.loaded + finishedBytes;\n            onProgress(totalLoaded / totalBytes);\n          }\n        };\n\n        try {\n          xhr.send(body);\n        } catch (e) {\n          reject(new NetworkError(url, e));\n        }\n      });\n\n      finishedTracksBytes += media.size;\n    }\n\n    return mediaPackage;\n  }\n\n  // Finishes the current ingest process via `ingest/ingest`. Do not call this\n  // method outside of `upload`!\n  async finishIngest({ mediaPackage, uploadSettings }) {\n    const workflowId = uploadSettings?.workflowId;\n\n    const body = new FormData();\n    body.append('mediaPackage', mediaPackage);\n    if (workflowId) {\n      body.append('workflowDefinitionId', workflowId);\n    }\n    await this.request(\"ingest/ingest\", { method: 'post', body: body });\n  }\n\n  // Returns the current state of the connection to the OC server.\n  getState() {\n    return this.#state;\n  }\n\n  // Returns whether or not a login is already provided (i.e. we don't need to\n  // login manually).\n  isLoginProvided() {\n    return this.#login === true;\n  }\n\n  // Returns whether or not the connection is ready to upload a video.\n  isReadyToUpload() {\n    return this.#state === STATE_LOGGED_IN;\n  }\n\n  // Returns the server URL in a form suitable to present to the user. Returns\n  // `null` if the server URL is not configured yet or if it is the same\n  // hostname as the one studio is running on.\n  prettyServerUrl() {\n    const url = this.#serverUrl;\n\n    return url && url.startsWith(\"https\")\n      ? new URL(url).hostname\n      : null;\n  }\n\n  // Constructs the ACL XML structure from the given template string.\n  constructAcl(template) {\n    if (!this.#currentUser) {\n      // Internal error: this should not happen.\n      throw new Error(`'currentUser' is '${this.#currentUser}' in 'constructAcl'`);\n    }\n\n    // Prepare template \"view\": the values that can be used within the template.\n    const ltiCourseId = this.#ltiSession?.context_id;\n    const roleOAuthUser = this.#currentUser.roles.find(r => r === 'ROLE_OAUTH_USER');\n\n    let defaultReadRoles = [this.#currentUser.userRole];\n    let defaultWriteRoles = [this.#currentUser.userRole];\n    if (ltiCourseId) {\n      defaultReadRoles.push(`${ltiCourseId}_Learner`, `${ltiCourseId}_Instructor`);\n      defaultWriteRoles.push(`${ltiCourseId}_Instructor`);\n    }\n\n    const view = {\n      userName: escapeString(this.#currentUser.user.username),\n      userRole: escapeString(this.#currentUser.userRole),\n      roleOAuthUser: escapeString(roleOAuthUser),\n      ltiCourseId: escapeString(ltiCourseId),\n      defaultReadRoles: defaultReadRoles.map(r => escapeString(r)),\n      defaultWriteRoles: defaultWriteRoles.map(r => escapeString(r)),\n    };\n    return Mustache.render(template, view);\n  }\n}\n\n\n// ===== Errors that can occur when accessing the Opencast API =====\n\n// Base error\nclass RequestError extends Error {}\n\n// The fetch itself failed. This unfortunately can have many causes, including\n// blocked by browser, CORS, server not available, device offline, ...\nclass NetworkError extends RequestError {\n  constructor(url, cause) {\n    super(`network error when accessing '${url}': ${cause}`);\n  }\n}\n\n// When requesting a JSON API but the response body is not valid JSON.\nclass InvalidJson extends RequestError {\n  constructor(url, cause) {\n    super(`invalid JSON when accessing ${url}: ${cause}`);\n  }\n}\n\n// When the request returns 401.\nclass Unauthorized extends RequestError {\n  constructor(status, statusText, url) {\n    super(`got ${status} ${statusText} when accessing ${url}`);\n  }\n}\n\n// When the request returns a non-2xx status code.\nclass NotOkResponse extends RequestError {\n  constructor(status, statusText, url) {\n    super(`unexpected ${status} ${statusText} response when accessing ${url}`);\n  }\n}\n\nclass UnexpectedRedirect extends RequestError {\n  constructor(url) {\n    super(`unexpected redirect when accessing ${url}`);\n  }\n}\n\n\n// ===== The Opencast context and `useOpencast` =====\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useOpencast = () => React.useContext(Context);\n\nexport const Provider = ({ initial, children }) => {\n  const [, updateDummy] = useState(0);\n  const [opencast, updateOpencast] = useState(initial);\n  opencast.updateGlobalOc = (newInstance) => {\n    updateOpencast(newInstance);\n\n    // If the object reference didn't change, we use this dummy state to force a\n    // rerender.\n    if (opencast === newInstance) {\n      updateDummy(old => old + 1);\n    }\n  };\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current Opencast connection: \", opencast);\n\n    // To avoid problems of session timeouts, we request `info/me` every 5\n    // minutes. The additional server load should be negligible, it won't\n    // notably stress the user's internet connection and is below almost all\n    // sensible timeouts.\n    const interval = setInterval(() => opencast.refreshConnection(), 5 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <Context.Provider value={opencast}>\n      {children}\n    </Context.Provider>\n  );\n};\n\n\n// ===== Stuff related to upload metadats =====\n\nconst escapeString = s => {\n  return new XMLSerializer().serializeToString(new Text(s));\n};\n\nconst dcCatalog = ({ creator, title, seriesId }) => {\n  const seriesLine = seriesId\n    ? `<dcterms:isPartOf>${escapeString(seriesId)}</dcterms:isPartOf>`\n    : '';\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <dublincore xmlns=\"http://www.opencastproject.org/xsd/1.0/dublincore/\"\n                xmlns:dcterms=\"http://purl.org/dc/terms/\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n        <dcterms:created xsi:type=\"dcterms:W3CDTF\">\n          ${escapeString(new Date(Date.now()).toISOString())}\n        </dcterms:created>\n        <dcterms:creator>${escapeString(creator)}</dcterms:creator>\n        <dcterms:extent xsi:type=\"dcterms:ISO8601\">PT5.568S</dcterms:extent>\n        <dcterms:title>${escapeString(title)}</dcterms:title>\n        <dcterms:spatial>Opencast Studio</dcterms:spatial>\n        ${seriesLine}\n    </dublincore>`;\n};\n\nconst DEFAULT_ACL_TEMPLATE = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Policy PolicyId=\"mediapackage-1\"\n  RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:permit-overrides\"\n  Version=\"2.0\"\n  xmlns=\"urn:oasis:names:tc:xacml:2.0:policy:schema:os\">\n  <Rule RuleId=\"user_read_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">read</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n  <Rule RuleId=\"user_write_Permit\" Effect=\"Permit\">\n    <Target>\n      <Actions>\n        <Action>\n          <ActionMatch MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n            <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">write</AttributeValue>\n            <ActionAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\"\n              DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n          </ActionMatch>\n        </Action>\n      </Actions>\n    </Target>\n    <Condition>\n      <Apply FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-is-in\">\n        <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">{{ userRole }}</AttributeValue>\n        <SubjectAttributeDesignator AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\"\n          DataType=\"http://www.w3.org/2001/XMLSchema#string\"/>\n      </Apply>\n    </Condition>\n  </Rule>\n</Policy>\n`;\n\nconst smil = ({ start, end }) => `\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\">\n    <body>\n      <par>\n        <video clipBegin=\"${start}s\" clipEnd=\"${end}s\" />\n      </par>\n    </body>\n  </smil>\n`;\n","import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n  box-sizing: border-box;\n}\n\nhtml, body, button, input {\n  font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n  overflow-x: auto;\n}\n\nlabel, button:not(:disabled) {\n  cursor: pointer;\n}\n\nbutton {\n  outline: none;\n}\n\n#root {\n  /* Of the most common mobile phones, the smallest viewport width is\n     320 (iPhone 5). */\n  min-width: 320px;\n  overflow-x: hidden;\n  height: 100%;\n}\n\n@keyframes pulse {\n  from { opacity: 0.85 }\n  50% { opacity: 0.6 }\n  to { opacity: 0.85 }\n}\n`;\n\nexport default GlobalStyle;\n","import { darken } from '@theme-ui/color';\n\nconst heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst baseButton = {\n  fontSize: 2,\n  '& svg': {\n    mr: 2\n  },\n  '&:disabled': {\n    bg: 'background',\n    borderColor: 'gray.2',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    color: 'text',\n    cursor: 'not-allowed',\n    opacity: 0.5\n  }\n};\n\nconst base = {\n  breakpoints: ['576px', '768px', '992px', '1200px'],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 300,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  heights: {\n    headerHeight: '3em'\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#888888',\n    highlight: '#3498db',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd', '#f5f5f5'],\n    videoOverlay: 'rgba(255, 255, 255, 0.2)'\n  },\n  text: {\n    text: {\n      fontWeight: 'body',\n      fontSize: '18px',\n    },\n    heading: {\n      fontWeight: 'heading',\n      fontSize: '18px',\n    },\n  },\n  buttons: {\n    primary: {\n      ...baseButton,\n      bg: 'primary',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('primary', 0.03)\n      },\n      '&:disabled': {\n        bg: 'gray.1'\n      },\n    },\n    danger: {\n      ...baseButton,\n      bg: 'error',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('error', 0.03)\n      }\n    },\n    text: {\n      ...baseButton,\n      bg: 'background',\n      color: 'text',\n      border: theme => `1px solid ${theme.colors.gray[1]}`,\n      '&:not(:disabled):hover': {\n        bg: 'gray.3'\n      }\n    }\n  },\n  cards: {\n    primary: {\n      bg: 'background',\n      boxShadow: '0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02)',\n      color: 'text',\n      maxWidth: '100%',\n      position: 'relative'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      mt: 0,\n      mb: 3,\n      fontSize: 5,\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      fontSize: '14pt',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    },\n    select: {\n      height: '2rem',\n      fontSize: '14pt',\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      }\n    },\n    progress: {\n      bg: '#ebebeb',\n      color: '#4ab57f',\n      height: '8px',\n    }\n  },\n  container: {\n    mx: 'auto',\n    p: 3,\n    maxWidth: ['none', 'none', 960, 1152, 1344]\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\nimport deTranslations from './locales/de.json';\nimport elTranslations from './locales/el.json';\nimport esTranslations from './locales/es.json';\nimport faTranslations from './locales/fa.json';\nimport frTranslations from './locales/fr.json';\nimport nlTranslations from './locales/nl.json';\nimport slTranslations from './locales/sl.json';\nimport trTranslations from './locales/tr.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  de: { translation: deTranslations },\n  el: { translation: elTranslations },\n  es: { translation: esTranslations },\n  fa: { translation: faTranslations },\n  fr: { translation: frTranslations },\n  nl: { translation: nlTranslations },\n  sl: { translation: slTranslations },\n  tr: { translation: trTranslations },\n};\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    fallbackLng: 'en',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        switch (format) {\n        case 'duration-seconds':\n          if (value == null) {\n            return '-:--:--';\n          }\n          const seconds = Math.floor(value % 60);\n          value /= 60;\n          const minutes = Math.floor(value % 60);\n          value /= 60;\n          const hours = Math.floor(value % 60);\n          let result = [minutes, seconds].map(\n            unit => (unit < 10 ? '0' : '') + unit\n          );\n          if (hours) {\n            result.unshift(hours);\n          }\n          return result.join(':');\n        default:\n          return value;\n        }\n      },\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator'],\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, ThemeProvider } from 'theme-ui';\n\nimport { Global } from '@emotion/core';\nimport * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport { SettingsManager, Provider as SettingsProvider } from './settings';\nimport { Opencast, Provider as OpencastProvider } from './opencast';\nimport { userHasWebcam, sleep } from './util';\n\nif (process.env.REACT_APP_ENABLE_SENTRY === '1') {\n  Sentry.init({\n    dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4',\n    release: `oc-studio-${process.env.REACT_APP_GIT_SHA}`,\n  });\n}\n\n// Load the rest of the application and try to fetch the `settings.json`.\nconst initialize = Promise.all([\n  // Load rest of the application code\n  import('./App').then(mod => mod.default),\n\n  // Check for camera devices\n  userHasWebcam(),\n\n  // Load the settings and initialize Opencast\n  SettingsManager.init().then(async settingsManager => {\n\n    // We wait for at most 300ms for `updateUser` to return. In the vast\n    // majority of cases, it should be done long before that timeout. We just\n    // don't want to stall the loading of the app forever if the user is on slow\n    // internet. The information is not actually needed for anything important\n    // in the beginning. It's mostly for debugging at this point.\n    const oc = new Opencast(settingsManager.settings().opencast);\n    await Promise.race([\n      oc.refreshConnection(),\n      sleep(300),\n    ]);\n\n    return [settingsManager, oc];\n  }),\n]);\n\nconst render = body => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\n// After the initialization is done, render to the root element.\ninitialize.then(\n  ([App, userHasWebcam, [settingsManager, opencast]]) => {\n    render(\n      <React.StrictMode>\n        <ThemeProvider theme={theme}>\n          <Global styles={GlobalStyle} />\n          <OpencastProvider initial={opencast}>\n            <SettingsProvider settingsManager={settingsManager}>\n              <App settingsManager={settingsManager} userHasWebcam={userHasWebcam} />\n            </SettingsProvider>\n          </OpencastProvider>\n        </ThemeProvider>\n      </React.StrictMode>\n     );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}