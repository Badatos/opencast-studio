{"version":3,"sources":["style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","settings.js","index.js"],"names":["GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","baseButton","mr","bg","borderColor","borderWidth","borderStyle","cursor","opacity","base","breakpoints","space","fonts","body","monospace","fontSizes","fontWeights","bold","lineHeights","heights","headerHeight","colors","text","background","primary","secondary","muted","highlight","error","gray","videoOverlay","fontSize","buttons","darken","danger","cards","boxShadow","maxWidth","position","styles","root","h1","mt","mb","h2","h3","h4","h5","h6","p","a","pre","overflowX","code","table","width","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","input","height","borderRadius","px","py","outline","transition","theme","select","container","mx","resources","en","translation","de","el","es","fa","fr","nl","tr","i18n","use","initReactI18next","LanguageDetector","init","fallbackLng","keySeparator","interpolation","escapeValue","detection","order","Boolean","window","location","hostname","match","SettingsManager","values","contextSettings","urlSettings","onChange","this","userSettings","newSettings","merge","localStorage","setItem","JSON","stringify","settings","all","defaultSettings","path","obj","segments","split","slice","segment","length","self","stored","getItem","parse","console","warn","url","origin","axios","get","response","contentType","headers","startsWith","data","urlParams","URLSearchParams","search","key","value","forEach","opencast","serverUrl","workflowId","loginName","loginPassword","Sentry","dsn","initialize","Promise","then","mod","default","render","ReactDOM","document","getElementById","App","settingsManager","StrictMode","e","message","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21db4179.chunk.js","sourcesContent":["import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n    box-sizing: border-box;\n}\n\nhtml, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    min-height: 100%;\n}\n\nhtml, body, button, input {\n    font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n    overflow-x: hidden;\n}\n\nlabel, button:not(:disabled) {\n    cursor: pointer;\n}\n\nbutton {\n    outline: none;\n}\n\n#root {\n  height: 100%;\n}\n`;\n\nexport default GlobalStyle;\n","import { darken } from '@theme-ui/color';\n\nconst heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst baseButton = {\n  '& svg': {\n    mr: 2\n  },\n  '&:disabled': {\n    bg: 'background',\n    borderColor: 'gray.2',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    color: 'text',\n    cursor: 'not-allowed',\n    opacity: 0.5\n  }\n};\n\nconst base = {\n  breakpoints: ['576px', '768px', '992px', '1200px'],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 300,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  heights: {\n    headerHeight: '3em'\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#888888',\n    highlight: '#3498db',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd', '#f5f5f5'],\n    videoOverlay: 'rgba(255, 255, 255, 0.2)'\n  },\n  text: {\n    text: {\n      fontWeight: 'body',\n      fontSize: '18px',\n    },\n    heading: {\n      fontWeight: 'heading',\n      fontSize: '18px',\n    },\n  },\n  buttons: {\n    primary: {\n      ...baseButton,\n      bg: 'primary',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('primary', 0.03)\n      },\n      '&:disabled': {\n        bg: 'gray.1'\n      },\n    },\n    danger: {\n      ...baseButton,\n      bg: 'error',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('error', 0.03)\n      }\n    },\n    text: {\n      ...baseButton,\n      bg: 'background',\n      color: 'text',\n      '&:not(:disabled):hover': {\n        bg: 'gray.3'\n      }\n    }\n  },\n  cards: {\n    primary: {\n      bg: 'background',\n      boxShadow: '0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02)',\n      color: 'text',\n      maxWidth: '100%',\n      position: 'relative'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      mt: 0,\n      mb: 3,\n      fontSize: 5,\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      fontSize: '14pt',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    },\n    select: {\n      height: '2rem',\n      fontSize: '14pt',\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      }\n    }\n  },\n  container: {\n    mx: 'auto',\n    p: 3,\n    maxWidth: ['none', 'none', 960, 1152, 1344]\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\nimport deTranslations from './locales/de.json';\nimport elTranslations from './locales/el.json';\nimport esTranslations from './locales/es.json';\nimport faTranslations from './locales/fa.json';\nimport frTranslations from './locales/fr.json';\nimport nlTranslations from './locales/nl.json';\nimport trTranslations from './locales/tr.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  de: { translation: deTranslations },\n  el: { translation: elTranslations },\n  es: { translation: esTranslations },\n  fa: { translation: faTranslations },\n  fr: { translation: frTranslations },\n  nl: { translation: nlTranslations },\n  tr: { translation: trTranslations }\n};\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    fallbackLng: 'en',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator'],\n    }\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\nimport merge from 'deepmerge';\n\n\nconst LOCAL_STORAGE_KEY = 'ocStudioSettings';\nconst CONTEXT_SETTINGS_FILE = 'settings.json';\n\n// Responsible for obtaining settings from different places (context settings,\n// local storage, query parameter) and merging them appropriately.\nexport class SettingsManager {\n  // The settings set by the server. These cannot be edited by the user. If the\n  // server did not specify any settings, this is `{}`.\n  contextSettings = {};\n\n  // These settings are given in the query part of the URL (e.g.\n  // `?opencast.loginName=peter`). If there are no settings in the URL, this\n  // is `{}`.\n  urlSettings = {};\n\n  // The settings set by the user and stored in local storage. This is `{}` if\n  // there were no settings in local storage.\n  #userSettings = {};\n\n  // This function is called whenever the user saved their settings. The new\n  // settings object is passed as parameter.\n  onChange = null;\n\n  // This constructor is mainly used for tests. Use `init()` to get an instance\n  // for the real application.\n  constructor(values) {\n    if (values) {\n      if (values.contextSettings) {\n        this.contextSettings = values.contextSettings;\n      }\n      if (values.urlSettings) {\n        this.urlSettings = values.urlSettings;\n      }\n      if (values.userSettings) {\n        this.#userSettings = values.userSettings;\n      }\n    }\n  }\n\n  // Creates a new `Settings` instance by loading user settings from local\n  // storage and attempting to load context settings from `/settings.json`.\n  static async init() {\n    let self = new SettingsManager();\n\n    // Load the user settings from local storage\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored !== null) {\n      try {\n        self.#userSettings = JSON.parse(stored);\n      } catch {\n        console.warn(\"Could not parse settings stored in local storage. Ignoring.\");\n      }\n    }\n\n    // Try to retrieve the context settings.\n    const basepath = process.env.PUBLIC_URL || '/';\n    const url = `${window.location.origin}${basepath}${CONTEXT_SETTINGS_FILE}`;\n    try {\n      const response = await axios.get(url);\n      const contentType = response.headers['Content-Type'];\n      if (!contentType || contentType.startsWith('application/json')) {\n        self.contextSettings = response.data;\n      }\n    } catch (e) {\n      if (e) {\n        console.warn('Could not load `settings.json`!', e);\n      }\n    }\n\n    // Get settings from URL query.\n    const urlParams = new URLSearchParams(window.location.search);\n    for (let [key, value] of urlParams) {\n      // Create empty objects for full path (if the key contains '.') and set\n      // the value at the end.\n      let obj = self.urlSettings;\n      const segments = key.split('.');\n      segments.slice(0, -1).forEach((segment) => {\n        obj[segment] = {};\n        obj = obj[segment];\n      });\n      obj[segments[segments.length - 1]] = value;\n    }\n\n    return self;\n  }\n\n  // Stores the given `newSettings` as user settings. The given object might be\n  // partial, i.e. only the new values can be specified. Values in `newSettings`\n  // override values in the old user settings.\n  saveSettings(newSettings) {\n    this.#userSettings = merge(this.#userSettings, newSettings);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.#userSettings));\n    if (this.onChange) {\n      this.onChange(this.settings());\n    }\n  }\n\n  // The merged settings that the whole application should use.\n  settings() {\n    return merge.all([this.#userSettings, this.contextSettings, this.urlSettings]);\n  }\n\n  // The values for the settings forms. These are simply the user settings with\n  // missing settings filled by `defaultSettings`.\n  formValues() {\n    return merge(defaultSettings, this.#userSettings);\n  }\n\n  // Returns whether a specific setting is fixed by the context setting or an\n  // URL setting. The path is given as string.\n  // Example: `manager.isFixed('opencast.loginName')`\n  isFixed(path) {\n    let obj = merge(this.contextSettings, this.urlSettings);\n    const segments = path.split('.');\n    for (const segment of segments.slice(0, -1)) {\n      if (!(segment in obj)) {\n        return false;\n      }\n      obj = obj[segment];\n    }\n\n    return segments[segments.length - 1] in obj;\n  }\n}\n\nconst defaultSettings = {\n  opencast: {\n    serverUrl: 'https://develop.opencast.org/',\n    workflowId: 'fast',\n    loginName: 'admin',\n    loginPassword: 'opencast',\n  }\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, ThemeProvider } from 'theme-ui';\n\nimport { Global } from '@emotion/core';\nimport * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport { SettingsManager } from './settings';\n\nif (process.env.NODE_ENV === 'production') {\n  Sentry.init({ dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4' });\n}\n\n// Load the rest of the application and try to fetch the `settings.json`.\nconst initialize = Promise.all([\n  import('./App').then(mod => mod.default),\n  SettingsManager.init(),\n]);\n\nconst render = body => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\n// After the initialization is done, render to the root element.\ninitialize.then(\n  ([App, settingsManager]) => {\n    render(\n      <React.StrictMode>\n        <ThemeProvider theme={theme}>\n          <Global styles={GlobalStyle} />\n          <App settingsManager={settingsManager} />\n        </ThemeProvider>\n      </React.StrictMode>\n     );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>{`Fatal error while loading app: ${e.message}`}</p>),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}