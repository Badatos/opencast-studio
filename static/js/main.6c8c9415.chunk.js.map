{"version":3,"sources":["opencast.js","style/global-style.js","theme.js","i18n/index.js","serviceWorker.js","settings.js","index.js"],"names":["STATE_UNCONFIGURED","STATE_CONNECTED","STATE_LOGGED_IN","STATE_NETWORK_ERROR","STATE_RESPONSE_NOT_OK","STATE_INVALID_RESPONSE","STATE_INCORRECT_LOGIN","Opencast","updateGlobalOc","newInstance","this","console","error","equal","catchRequestError","a","updateUser","getInfoMe","newUser","user","username","jsonRequest","path","options","url","request","response","json","RequestError","headers","password","encoded","btoa","unescape","encodeURIComponent","fetch","credentials","redirect","status","ok","type","statusText","recordings","title","creator","refreshConnection","isReadyToUpload","then","text","mediaPackage","dc","DOMParser","parseFromString","dc_created","getElementsByTagName","dc_creator","dc_title","textContent","Date","now","toISOString","body","FormData","append","XMLSerializer","serializeToString","method","deviceType","media","trackFlavor","downloadName","ingestBody","startsWith","URL","hostname","settings","self","serverUrl","endsWith","slice","workflowId","loginProvided","loginName","loginPassword","msg","fn","Context","React","createContext","useOpencast","useContext","Provider","initial","children","useState","updateDummy","opencast","updateOpencast","old","useEffect","debug","value","GlobalStyle","heading","color","fontFamily","lineHeight","fontWeight","baseButton","fontSize","mr","bg","borderColor","borderWidth","borderStyle","cursor","opacity","base","breakpoints","space","fonts","monospace","fontSizes","fontWeights","bold","lineHeights","heights","headerHeight","colors","background","primary","secondary","muted","highlight","gray","videoOverlay","buttons","darken","danger","border","theme","cards","boxShadow","maxWidth","position","styles","root","h1","mt","mb","h2","h3","h4","h5","h6","p","pre","overflowX","code","table","width","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","td","img","input","height","borderRadius","px","py","outline","transition","select","container","mx","resources","en","translation","de","el","es","fa","fr","nl","tr","i18n","use","initReactI18next","LanguageDetector","init","fallbackLng","keySeparator","interpolation","escapeValue","detection","order","Boolean","window","location","match","SettingsManager","values","contextSettings","urlSettings","onChange","userSettings","newSettings","merge","localStorage","setItem","JSON","stringify","all","defaultSettings","obj","fixedSettings","segments","split","segment","isConfigurable","stored","getItem","parse","warn","loadContextSettings","urlParams","URLSearchParams","search","key","forEach","length","basepath","origin","get","SyntaxError","Sentry","dsn","initialize","Promise","mod","default","App","settingsManager","oc","render","ReactDOM","document","getElementById","StrictMode","e","message","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c8c9415.chunk.js","sourcesContent":["//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport React, { useEffect, useState } from 'react';\nimport equal from 'fast-deep-equal';\n\n\n// The server URL was not specified.\nexport const STATE_UNCONFIGURED = 'unconfigured';\n\n// The OC server is reachable but a login was not attempted and the current user\n// is anonymous.\nexport const STATE_CONNECTED = 'connected';\n\n// The OC server is reachable and the user is authenticated.\nexport const STATE_LOGGED_IN = 'logged_in';\n\n// Some network error occured when accessing the server.\nexport const STATE_NETWORK_ERROR = 'network_error';\n\n// When accessing the OC API, the request returned as non-2xx code unexpectedly.\n// This likely indicates that the server is not actually a valid OC server.\nexport const STATE_RESPONSE_NOT_OK = 'response_not_ok';\n\n// The API requested returned invalid JSON or unexpected data.\nexport const STATE_INVALID_RESPONSE = 'invalid_response';\n\n// The server is reachable and a login was provided, but the login did not\n// succeed.\nexport const STATE_INCORRECT_LOGIN = 'incorrect_login';\n\n\nexport class Opencast {\n  #state = STATE_UNCONFIGURED;\n  #serverUrl = null;\n  #workflowId = null;\n\n  // This can one of either:\n  // - `null`: no login is provided and login data is not specified\n  // - `true`: a login is already automatically provided from the OC context\n  // - `{ username, password }`: username and password are given\n  #login = null;\n\n  // The response of `info/me.json` or `null` if requesting that API did not\n  // succeed.\n  #currentUser = null;\n\n  updateGlobalOc = null;\n\n\n  // Creates a new instance. Static method instead of constructor because it\n  // needs to be async.\n  static async init(settings) {\n    let self = new Opencast();\n\n    if (!settings?.serverUrl) {\n      self.#state = STATE_UNCONFIGURED;\n      self.#serverUrl = null;\n      self.#workflowId = null;\n      self.#login = null;\n\n      return self;\n    }\n\n    self.#serverUrl = settings.serverUrl.endsWith('/')\n      ? settings.serverUrl.slice(0, -1)\n      : settings.serverUrl;\n    self.#workflowId = settings.workflowId;\n\n    if (settings.loginProvided === true) {\n      // Here we can assume Studio is running within an Opencast instance and\n      // the route to Studio is protected via login. This means that login\n      // cookies are already present and we don't need to worry about that.\n      self.#login = true;\n    } else if (settings.loginName && settings.loginPassword) {\n      // Studio is not running in OC context, but username and password are\n      // provided.\n      self.#login = {\n        username: settings.loginName,\n        password: settings.loginPassword,\n      };\n    } else {\n      // Login is not yet provided.\n      self.#login = null;\n    }\n\n    await catchRequestError(async () => await self.updateUser());\n\n    return self;\n  }\n\n  // Updates the global OC instance from `this` to `newInstance`, IF the new\n  // instance is different. This should only be called when the settings are\n  // saved.\n  setGlobalInstance(newInstance) {\n    if (!this.updateGlobalOc) {\n      console.error(\"bug: 'updateGlobalOc' not set\");\n    }\n\n    // We only update if the two instances are different (ignoring the\n    // `updateGlobalOc` key though).\n    newInstance.updateGlobalOc = this.updateGlobalOc;\n    const changed = this.#state !== newInstance.#state\n      || this.#serverUrl !== newInstance.#serverUrl\n      || this.#workflowId !== newInstance.#workflowId\n      || !equal(this.#login, newInstance.#login)\n      || !equal(this.#currentUser, newInstance.#currentUser);\n\n    if (changed) {\n      this.updateGlobalOc(newInstance);\n    }\n  }\n\n  // Refreshes the connection by requesting `info/me` unless the state is\n  // 'unconfigured'.\n  //\n  // If the request errors or returns a different user, the globale Opencast\n  // instance is updated.\n  async refreshConnection() {\n    if (this.#state === STATE_UNCONFIGURED) {\n      return;\n    }\n\n    await catchRequestError(async () => {\n      // Request to `info/me`. If the user or the current state has changed\n      const changed = await this.updateUser();\n      if (changed) {\n        this.updateGlobalOc(this);\n      }\n    });\n  }\n\n  // Updates `#currentUser` by checking 'info/me.json'.\n  //\n  // The `#state` is also updated accordingly to `STATE_LOGGED_IN`,\n  // `STATE_INCORRECT_LOGIN` or `STATE_CONNECTED`. This method returns whether\n  // the state or user object has changed in any way.\n  async updateUser() {\n    const newUser = await this.getInfoMe();\n\n    if (!equal(newUser, this.#currentUser)) {\n      this.#currentUser = newUser;\n      if (newUser.user.username === 'anonymous') {\n        if (this.#login) {\n          this.#state = STATE_INCORRECT_LOGIN;\n        } else {\n          this.#state = STATE_CONNECTED;\n        }\n      } else {\n        this.#state = STATE_LOGGED_IN;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Returns the response from the `info/me.json` endpoint.\n  async getInfoMe() {\n    return await this.jsonRequest(\"info/me.json\");\n  }\n\n  // Sends a request to the Opencast API expecting a JSON response.\n  //\n  // On success, the parsed JSON is returned as object. If anything goes wrong,\n  // a `RequestError` is thrown and the corresponding `this.#state` is set.\n  async jsonRequest(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n    const response = await this.request(path, options);\n\n    try {\n      return await response.json();\n    } catch(e) {\n      this.#state = STATE_INVALID_RESPONSE;\n      throw new RequestError(`invalid response (invalid JSON) when accessing ${url}: `, e);\n    }\n  }\n\n  // Sends a request to the Opencast API, returning the response object.\n  //\n  // If anything goes wrong, a `RequestError` is thrown and the corresponding\n  // `this.#state` is set.\n  async request(path, options = {}) {\n    const url = `${this.#serverUrl}/${path}`;\n\n    // Add HTTP Basic Auth headers if username and password are provided.\n    let headers = {};\n    if (this.#login?.username && this.#login?.password) {\n      const encoded = btoa(unescape(encodeURIComponent(\n        this.#login.username + ':' + this.#login.password\n      )));\n      headers = { 'Authorization': `Basic ${encoded}` };\n    }\n\n    let response;\n    try {\n      response = await fetch(url, {\n        ...options,\n        credentials: 'same-origin',\n        redirect: 'manual',\n        headers,\n      });\n    } catch (e) {\n      this.#state = STATE_NETWORK_ERROR;\n      throw new RequestError(`network error when accessing '${url}': `, e);\n    }\n\n    // Handle 401 Bad credentials for HTTP Basic Auth\n    if (response.status === 401) {\n      this.#state = STATE_INCORRECT_LOGIN;\n      throw new RequestError(\"incorrect login data (request returned 401)\");\n    }\n\n    if (!response.ok && response.type !== 'opaqueredirect') {\n      this.#state = STATE_RESPONSE_NOT_OK;\n      throw new RequestError(\n        `unexpected ${response.status} ${response.statusText} response when accessing ${url}`\n      );\n    }\n\n    return response;\n  }\n\n  // Uploads the given recordings with the given title and creator metadata. If\n  // the upload fails, `false` is returned and `getState` changes to an error\n  // state.\n  async upload({ recordings, title, creator }) {\n    // Refresh connection and check if we are ready to upload.\n    await this.refreshConnection();\n    if (!this.isReadyToUpload()) {\n      return false;\n    }\n\n    // Actually upload\n    try {\n      // Create new media package\n      let mediaPackage = await this.request(\"ingest/createMediaPackage\")\n        .then(response => response.text());\n\n\n      // Prepare meta data\n      let base_dc = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <dublincore xmlns=\"http://www.opencastproject.org/xsd/1.0/dublincore/\"\n                    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n                    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <dcterms:created xsi:type=\"dcterms:W3CDTF\">2001-01-01T01:01Z</dcterms:created>\n            <dcterms:creator>Creator not set</dcterms:creator>\n            <dcterms:extent xsi:type=\"dcterms:ISO8601\">PT5.568S</dcterms:extent>\n            <dcterms:title>Title Not Set</dcterms:title>\n            <dcterms:spatial>Opencast Studio</dcterms:spatial>\n        </dublincore>`;\n\n      const dc = new DOMParser().parseFromString(base_dc, 'text/xml');\n      const dc_created = dc.getElementsByTagName('dcterms:created');\n      const dc_creator = dc.getElementsByTagName('dcterms:creator');\n      const dc_title = dc.getElementsByTagName('dcterms:title');\n\n      dc_created[0].textContent = new Date(Date.now()).toISOString();\n      dc_creator[0].textContent = creator;\n      dc_title[0].textContent = title;\n\n\n      // Add metadata to media package\n      const body = new FormData();\n      body.append('mediaPackage', mediaPackage);\n      body.append('dublinCore', new XMLSerializer().serializeToString(dc));\n      body.append('flavor', 'dublincore/episode');\n\n      mediaPackage = await this.request(\"ingest/addDCCatalog\", { method: 'post', body })\n        .then(response => response.text());\n\n\n      // Add all recordings\n      for (const { deviceType, media } of recordings) {\n        let trackFlavor = 'presentation/source';\n        if (deviceType === 'desktop') {\n          trackFlavor = 'presentation/source';\n        } else if (deviceType === 'video') {\n          trackFlavor = 'presenter/source';\n        }\n\n        const flavor = deviceType === 'desktop' ? 'Presentation' : 'Presenter';\n        const downloadName = `${flavor} - ${title || 'Recording'}.webm`;\n\n        const body = new FormData();\n        body.append('mediaPackage', mediaPackage);\n        body.append('flavor', trackFlavor);\n        body.append('tags', '');\n        body.append('BODY', media, downloadName);\n\n        mediaPackage = await this.request(\"ingest/addTrack\", { method: 'post', body })\n          .then(response => response.text());\n      }\n\n\n      // Finalize/ingest media package\n      const ingestBody = new FormData();\n      ingestBody.append('mediaPackage', mediaPackage);\n      ingestBody.append('workflowDefinitionId', this.#workflowId);\n      await this.request(\"ingest/ingest\", { method: 'post', body: ingestBody });\n\n      return true;\n    } catch(e) {\n      console.error(\"Error occured during upload: \", e);\n      return false;\n    }\n  }\n\n  // Returns the current state of the connection to the OC server.\n  getState() {\n    return this.#state;\n  }\n\n  // Returns whether or not a login is already provided (i.e. we don't need to\n  // login manually).\n  isLoginProvided() {\n    return this.#login === true;\n  }\n\n  // Returns whether or not the connection is ready to upload a video.\n  isReadyToUpload() {\n    return this.#state === STATE_LOGGED_IN;\n  }\n\n  // Returns the server URL in a form suitable to present to the user. Returns\n  // `null` if the server URL is not configured yet or if it is the same\n  // hostname as the one studio is running on.\n  prettyServerUrl() {\n    const url = this.#serverUrl;\n\n    return url && url.startsWith(\"https\")\n      ? new URL(url).hostname\n      : null;\n  }\n}\n\n\n// Internal error type, simply containing a string.\nfunction RequestError(msg) {\n  this.msg = msg;\n}\n\nconst catchRequestError = async (fn) => {\n  try {\n    return await fn();\n  } catch (e) {\n    if (e instanceof RequestError) {\n      console.error(e.msg);\n    } else {\n      throw e;\n    }\n    return null;\n  }\n};\n\n\nconst Context = React.createContext(null);\n\n// Returns the current provided Opencast instance.\nexport const useOpencast = () => React.useContext(Context);\n\nexport const Provider = ({ initial, children }) => {\n  const [, updateDummy] = useState(0);\n  const [opencast, updateOpencast] = useState(initial);\n  opencast.updateGlobalOc = (newInstance) => {\n    updateOpencast(newInstance);\n\n    // If the object reference didn't change, we use this dummy state to force a\n    // rerender.\n    if (opencast === newInstance) {\n      updateDummy(old => old + 1);\n    }\n  };\n\n  // This debug output will be useful for future debugging sessions.\n  useEffect(() => {\n    console.debug(\"Current Opencast connection: \", opencast);\n  });\n\n  return (\n    <Context.Provider value={opencast}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import css from '@emotion/css/macro'\n\nconst GlobalStyle = css`\n* {\n    box-sizing: border-box;\n}\n\nhtml, body, button, input {\n    font-family: Ubuntu, Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, sans-serif;\n}\n\nbody {\n    overflow-x: hidden;\n}\n\nlabel, button:not(:disabled) {\n    cursor: pointer;\n}\n\nbutton {\n    outline: none;\n}\n\n#root {\n  height: 100%;\n}\n\n@keyframes pulse {\n  from { opacity: 0.85 }\n  50% { opacity: 0.6 }\n  to { opacity: 0.85 }\n}\n`;\n\nexport default GlobalStyle;\n","import { darken } from '@theme-ui/color';\n\nconst heading = {\n  color: 'text',\n  fontFamily: 'heading',\n  lineHeight: 'heading',\n  fontWeight: 'heading'\n};\n\nconst baseButton = {\n  fontSize: 2,\n  '& svg': {\n    mr: 2\n  },\n  '&:disabled': {\n    bg: 'background',\n    borderColor: 'gray.2',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    color: 'text',\n    cursor: 'not-allowed',\n    opacity: 0.5\n  }\n};\n\nconst base = {\n  breakpoints: ['576px', '768px', '992px', '1200px'],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    heading: 'Roboto, \"Open Sans\", \"Segoe UI\", \"Helvetica Neue\", Verdana, system-ui, sans-serif',\n    monospace: '\"Roboto Mono\", monospace'\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 300,\n    heading: 600,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125\n  },\n  heights: {\n    headerHeight: '3em'\n  },\n  colors: {\n    text: '#000',\n    background: '#fff',\n    primary: '#47af7a',\n    secondary: '#30c',\n    muted: '#888888',\n    highlight: '#3498db',\n    error: '#f14668',\n    gray: ['#363636', '#666666', '#aaaaaa', '#dddddd', '#f5f5f5'],\n    videoOverlay: 'rgba(255, 255, 255, 0.2)'\n  },\n  text: {\n    text: {\n      fontWeight: 'body',\n      fontSize: '18px',\n    },\n    heading: {\n      fontWeight: 'heading',\n      fontSize: '18px',\n    },\n  },\n  buttons: {\n    primary: {\n      ...baseButton,\n      bg: 'primary',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('primary', 0.03)\n      },\n      '&:disabled': {\n        bg: 'gray.1'\n      },\n    },\n    danger: {\n      ...baseButton,\n      bg: 'error',\n      color: 'background',\n      '&:not(:disabled):hover': {\n        bg: darken('error', 0.03)\n      }\n    },\n    text: {\n      ...baseButton,\n      bg: 'background',\n      color: 'text',\n      border: theme => `1px solid ${theme.colors.gray[1]}`,\n      '&:not(:disabled):hover': {\n        bg: 'gray.3'\n      }\n    }\n  },\n  cards: {\n    primary: {\n      bg: 'background',\n      boxShadow: '0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02)',\n      color: 'text',\n      maxWidth: '100%',\n      position: 'relative'\n    }\n  },\n  styles: {\n    root: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body'\n    },\n    h1: {\n      ...heading,\n      mt: 0,\n      mb: 3,\n      fontSize: 5,\n    },\n    h2: {\n      ...heading,\n      fontSize: 4\n    },\n    h3: {\n      ...heading,\n      fontSize: 3\n    },\n    h4: {\n      ...heading,\n      fontSize: 2\n    },\n    h5: {\n      ...heading,\n      fontSize: 1\n    },\n    h6: {\n      ...heading,\n      fontSize: 0\n    },\n    p: {\n      color: 'text',\n      fontFamily: 'body',\n      fontWeight: 'body',\n      lineHeight: 'body'\n    },\n    a: {\n      color: 'primary'\n    },\n    pre: {\n      fontFamily: 'monospace',\n      overflowX: 'auto',\n      code: {\n        color: 'inherit'\n      }\n    },\n    code: {\n      fontFamily: 'monospace',\n      fontSize: 'inherit'\n    },\n    table: {\n      width: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    td: {\n      textAlign: 'left',\n      borderBottomStyle: 'solid'\n    },\n    img: {\n      maxWidth: '100%'\n    },\n    input: {\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'gray.2',\n      height: '2rem',\n      fontSize: '14pt',\n      borderRadius: 2,\n      px: 2,\n      py: 0,\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      },\n      '&[aria-invalid=\"true\"]': {\n        borderColor: 'error',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.error}`\n      }\n    },\n    select: {\n      height: '2rem',\n      fontSize: '14pt',\n      outline: 'none',\n      transition: 'border-color 0.3s, box-shadow 0.3s',\n      width: '100%',\n      '&:focus': {\n        borderColor: 'primary',\n        boxShadow: theme => `0 0 3px 0 ${theme.colors.primary}`\n      }\n    }\n  },\n  container: {\n    mx: 'auto',\n    p: 3,\n    maxWidth: ['none', 'none', 960, 1152, 1344]\n  }\n};\n\nexport default base;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslations from './locales/en.json';\nimport deTranslations from './locales/de.json';\nimport elTranslations from './locales/el.json';\nimport esTranslations from './locales/es.json';\nimport faTranslations from './locales/fa.json';\nimport frTranslations from './locales/fr.json';\nimport nlTranslations from './locales/nl.json';\nimport trTranslations from './locales/tr.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  de: { translation: deTranslations },\n  el: { translation: elTranslations },\n  es: { translation: esTranslations },\n  fa: { translation: faTranslations },\n  fr: { translation: frTranslations },\n  nl: { translation: nlTranslations },\n  tr: { translation: trTranslations }\n};\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    fallbackLng: 'en',\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false\n    },\n\n    detection: {\n      order: ['localStorage', 'navigator'],\n    }\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import merge from 'deepmerge';\n\n\nconst LOCAL_STORAGE_KEY = 'ocStudioSettings';\nconst CONTEXT_SETTINGS_FILE = 'settings.json';\n\n// Responsible for obtaining settings from different places (context settings,\n// local storage, query parameter) and merging them appropriately.\nexport class SettingsManager {\n  // The settings set by the server. These cannot be edited by the user. If the\n  // server did not specify any settings, this is `{}`.\n  contextSettings = {};\n\n  // These settings are given in the query part of the URL (e.g.\n  // `?opencast.loginName=peter`). If there are no settings in the URL, this\n  // is `{}`.\n  urlSettings = {};\n\n  // The settings set by the user and stored in local storage. This is `{}` if\n  // there were no settings in local storage.\n  #userSettings = {};\n\n  // This function is called whenever the user saved their settings. The new\n  // settings object is passed as parameter.\n  onChange = null;\n\n  // This constructor is mainly used for tests. Use `init()` to get an instance\n  // for the real application.\n  constructor(values) {\n    if (values) {\n      if (values.contextSettings) {\n        this.contextSettings = values.contextSettings;\n      }\n      if (values.urlSettings) {\n        this.urlSettings = values.urlSettings;\n      }\n      if (values.userSettings) {\n        this.#userSettings = values.userSettings;\n      }\n    }\n  }\n\n  // Creates a new `Settings` instance by loading user settings from local\n  // storage and attempting to load context settings from `/settings.json`.\n  static async init() {\n    let self = new SettingsManager();\n\n    // Load the user settings from local storage\n    const stored = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (stored !== null) {\n      try {\n        self.#userSettings = JSON.parse(stored);\n      } catch {\n        console.warn(\"Could not parse settings stored in local storage. Ignoring.\");\n      }\n    }\n\n    self.contextSettings = await SettingsManager.loadContextSettings() || {};\n\n    // Get settings from URL query.\n    const urlParams = new URLSearchParams(window.location.search);\n    for (let [key, value] of urlParams) {\n      // Create empty objects for full path (if the key contains '.') and set\n      // the value at the end.\n      let obj = self.urlSettings;\n      const segments = key.split('.');\n      segments.slice(0, -1).forEach((segment) => {\n        obj[segment] = {};\n        obj = obj[segment];\n      });\n      obj[segments[segments.length - 1]] = value;\n    }\n\n    return self;\n  }\n\n  // Attempts to loads `settings.json`. If it fails for some reason, returns\n  // `null` and prints an appropriate message on console.\n  static async loadContextSettings() {\n    // Try to retrieve the context settings.\n    let basepath = process.env.PUBLIC_URL || '/';\n    if (!basepath.endsWith('/')) {\n      basepath += '/';\n    }\n    const url = `${window.location.origin}${basepath}${CONTEXT_SETTINGS_FILE}`;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (e) {\n      console.warn('Could not access `settings.json` due to network error!', e || \"\");\n      return null;\n    }\n\n    if (response.status === 404) {\n      // If `settings.json` was not found, we silently ignore the error. We\n      // expecet many installation to now provide this file.\n      console.debug(\"`settings.json` returned 404: ignoring\");\n      return null;\n    } else if (!response.ok) {\n      console.error(\n        `Fetching 'settings.json' failed: ${response.status} ${response.statusText}`\n      );\n      return null;\n    }\n\n    if (!response.headers.get('Content-Type').startsWith('application/json')) {\n      console.warn(\n        \"'settings.json' request does not have 'Content-Type: application/json' -> ignoring...\"\n      );\n      return null;\n    }\n\n    try {\n      return await response.json();\n    } catch(e) {\n      console.error(\"Could not parse 'settings.json': \", e);\n      throw new SyntaxError(`Could not parse 'settings.json': ${e}`);\n    }\n  }\n\n\n  // Stores the given `newSettings` as user settings. The given object might be\n  // partial, i.e. only the new values can be specified. Values in `newSettings`\n  // override values in the old user settings.\n  saveSettings(newSettings) {\n    this.#userSettings = merge(this.#userSettings, newSettings);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.#userSettings));\n    if (this.onChange) {\n      this.onChange(this.settings());\n    }\n  }\n\n  // The merged settings that the whole application should use.\n  settings() {\n    return merge.all([this.#userSettings, this.contextSettings, this.urlSettings]);\n  }\n\n  // The values for the settings forms. These are simply the user settings with\n  // missing settings filled by `defaultSettings`.\n  formValues() {\n    return merge(defaultSettings, this.#userSettings);\n  }\n\n  fixedSettings() {\n    return merge(this.contextSettings, this.urlSettings);\n  }\n\n  // Returns whether a specific setting is configurable by the user. It is not\n  // if the setting is fixed by the context setting or an URL setting. The path\n  // is given as string. Example: `manager.isConfigurable('opencast.loginName')`\n  isConfigurable(path) {\n    let obj = this.fixedSettings();\n    const segments = path.split('.');\n    for (const segment of segments) {\n      if (!(segment in obj)) {\n        return true;\n      }\n      obj = obj[segment];\n    }\n\n    return false;\n  }\n\n  isUsernameConfigurable() {\n    return this.isConfigurable('opencast.loginName')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n  isPasswordConfigurable() {\n    return this.isConfigurable('opencast.loginPassword')\n      && this.fixedSettings().opencast?.loginProvided !== true;\n  }\n}\n\nconst defaultSettings = {\n  opencast: {\n    serverUrl: 'https://develop.opencast.org/',\n    workflowId: 'fast',\n    loginName: 'admin',\n    loginPassword: 'opencast',\n  }\n};\n","//; -*- mode: rjsx;-*-\n/** @jsx jsx */\nimport { jsx, ThemeProvider } from 'theme-ui';\n\nimport { Global } from '@emotion/core';\nimport * as Sentry from '@sentry/browser';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GlobalStyle from './style/global-style';\nimport theme from './theme';\n\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\nimport { SettingsManager } from './settings';\nimport { Opencast, Provider as OpencastProvider } from './opencast';\n\nif (process.env.REACT_APP_ENABLE_SENTRY === '1') {\n  Sentry.init({ dsn: 'https://66e6b4dc3d59463fa34272abcb5da6b1@sentry.virtuos.uos.de/4' });\n}\n\n// Load the rest of the application and try to fetch the `settings.json`.\nconst initialize = Promise\n  .all([\n    import('./App').then(mod => mod.default),\n    SettingsManager.init(),\n  ])\n  .then(async ([App, settingsManager]) => {\n    const oc = await Opencast.init(settingsManager.settings().opencast);\n    return [App, settingsManager, oc];\n  })\n\nconst render = body => {\n  ReactDOM.render(body, document.getElementById('root'));\n};\n\n// After the initialization is done, render to the root element.\ninitialize.then(\n  ([App, settingsManager, opencast]) => {\n    render(\n      <React.StrictMode>\n        <ThemeProvider theme={theme}>\n          <Global styles={GlobalStyle} />\n          <OpencastProvider initial={opencast}>\n            <App settingsManager={settingsManager} />\n          </OpencastProvider>\n        </ThemeProvider>\n      </React.StrictMode>\n     );\n  },\n\n  // This error case is vey unlikely to occur.\n  e => render(<p>\n    {`Fatal error while loading app: ${e.message}`}\n    <br />\n    This might be caused by a incorrect configuration by the system administrator.\n  </p>),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}